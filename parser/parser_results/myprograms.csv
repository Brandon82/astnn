id,code,operator,label,method
1,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= -1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
2,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 1, newSize);
        return subarray;
    }",CR,0,
3,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
6,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
                return ISOSCELES;
            if (trian == 2 && a / c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
8,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length + 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
9,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = --x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
12,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 1) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",CR,0,
13,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c != maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
14,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i > 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
15,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( ~i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
16,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i];
        data[i] = data[~j];
        data[j] = tmp;
    }",LOI,0,
17,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y % y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
18,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < -1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
19,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length / 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
22,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (~c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
25,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x / x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
26,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length % 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
27,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (!(a + b < c || a + c < b) || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
28,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper / 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
30,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i > 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
33,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 * Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
34,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 || a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOR,0,
35,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (!(diff > 0)) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",SEOI,0,
38,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x == threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",ROR,0,
39,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first == upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
41,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position--;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AORS,0,
42,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos-- == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,1,
43,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i != delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,1,
44,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length + 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AORB,0,
45,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length % 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORB,0,
48,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF != 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
49,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = -1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
50,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= --maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
51,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( -position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIU,0,
52,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) != mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
54,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF != 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
56,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c++ );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,1,
59,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt > 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",ROR,1,
60,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
            trian = trian + 3;
        if (b <= c) {
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
61,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
62,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
63,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) * 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
64,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[++lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
67,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) <= ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",ROR,0,
70,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (--currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
72,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
74,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || ~c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
75,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, ~upper + 1, last );
        }
    }",LOI,0,
77,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c < maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,1,
78,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound < data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
80,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, +inverse * x, 0);

  }",AORB,0,
82,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[--lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
83,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e >= 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
87,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length % 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
91,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (~c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
92,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
            trian = trian + -3;
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AOIU,0,
93,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[~max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",LOI,0,
94,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,1,
95,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= ++maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
97,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize < 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
98,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && ++b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
99,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j < i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROR,0,
100,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower < upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
101,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper * 1, last );
        }
    }",AORB,0,
104,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) >= ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",ROR,0,
105,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = -1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
106,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
108,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
            trian = trian + 0;
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",CR,0,
109,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive / startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
110,"    public static int gcd(int u, int v) {
        if (u - v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
111,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > ~c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
112,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                    return ISOSCELES;
                if (trian <= 3 && b + c > a) {
                }
            }
        }
        return INVALID;
    }",ROR,0,
117,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = abs(We1_BA_DEF_ev_ctr2) * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ABSI,1,
118,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max++] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
119,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (++a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
122,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) >= 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,0,
123,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper % 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
124,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length % 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
125,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i-- < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
126,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number--;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
128,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < ++upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
129,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position == maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
131,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive * startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
132,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[++max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
133,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive % startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
135,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian != 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
136,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (!(c <= maxDelimCodePoint) && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOI,0,
137,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1;) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AODS,0,
138,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) != 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
141,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) <= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
142,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( --currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
144,"    public  void setEpsilon( double epsilon )
    {
        this.mEpsilon = epsilon++;
    }",AOIS,1,
145,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
150,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive % startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
151,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] > codePoint) {
                return true;
            }
        }
        return false;
    }",ROR,0,
157,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j % 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORB,1,
159,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
        if (b >= c) {
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",ROR,0,
160,"    public static int gcd(int u, int v) {
        if (u * v >= 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,0,
162,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) >= 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,0,
164,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            ;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ADL,0,
165,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = --x;
        mResult = r;
        return r;
    }",AOIS,0,
166,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                    return ISOSCELES;
                if (trian == 0 && b + c > a) {
                }
            }
        }
        return INVALID;
    }",CR,0,
170,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
171,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > -1) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,1,
175,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition++ >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
176,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos-- < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
179,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
        if (trian != 3) {
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",SEOR,0,
180,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, -1);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
181,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u != 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,0,
182,"    public  void setEpsilon( double epsilon )
    {
        this.mEpsilon = ++epsilon;
    }",AOIS,0,
183,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ROR,1,
184,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( --c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
185,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + ++c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
186,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 1) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,0,
192,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
193,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c-- <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
195,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
197,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 1, newSize);
        return subarray;
    }",CR,0,
198,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (++currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
201,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c <= escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,1,
202,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = -1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
203,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[-j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIU,0,
205,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 1) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
206,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian % 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
207,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (!(c <= maxDelimCodePoint) && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOI,0,
208,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex <= 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
210,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind <= array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
211,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == --codePoint) {
                return true;
            }
        }
        return false;
    }",AOIS,0,
216,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a / b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
218,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a++ == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
219,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
222,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position <= maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,1,
225,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 0;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
226,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j]++;
                        a[j] = mytemp1;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
227,"public static void main(int b, int c, int d, int e, int f)",AOIS,1,
229,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( --c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
230,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 1) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
231,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = +u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
232,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset >= wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",ROR,0,
233,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z + z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
235,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i >= data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",ROR,0,
236,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position-- < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
241,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, -data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIU,0,
244,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (++m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
247,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a++ + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
250,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
251,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex > array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
253,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j * 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORB,0,
254,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (!(c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0)) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOI,0,
255,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length * 1.5));
        for (int i = -1; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",AOIU,0,
256,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 0;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
258,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] < max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
259,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x == -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",ROR,0,
261,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff-- > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
263,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (~lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
264,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition--) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
265,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound <= data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
267,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c++ > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
269,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length / 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AORB,0,
270,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position-- );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
271,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position++;
    }",AOIS,1,
273,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse / z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
274,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse / x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
275,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) == 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
276,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[~upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
278,"    public  void sort( int[] data )
    {
        for (int i = 0; i <= data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROR,1,
282,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == ~b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
283,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = --temp;
                }
            }
        }
    }",AOIS,0,
285,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position /= Character.charCount( c );
            }
        }
        return position;
    }",SAR,0,
287,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v ^ 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",LOR,0,
288,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i];
        data[i] = data[j];
        data[j] = tmp++;
    }",AOIS,1,
289,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex == array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
290,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i == 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
291,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z % z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
292,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) <= 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,1,
294,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (~a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
297,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e != 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
298,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff-- < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
299,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c != 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
302,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x / N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
303,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return newPosition < --maxPosition;
    }",AOIS,0,
304,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF++ > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
305,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e++ > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
308,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs( diff++ ) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
310,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x - x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
311,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > ++i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
312,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
            trian = trian + 0;
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",CR,0,
313,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (~trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
314,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos == maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",ROR,0,
315,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y % y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
316,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 0 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",CR,1,
317,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound++ < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
318,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos-- >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
319,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 0;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",CR,0,
320,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (~first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
322,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, -1);

  }",AOIU,0,
324,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper-- + 1, last );
        }
    }",AOIS,1,
326,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint++ && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
328,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                    return ISOSCELES;
                if (trian == 3 && b - c > a) {
                }
            }
        }
        return INVALID;
    }",AORB,0,
330,"    public  java.lang.String nextToken()
    {
        currentPosition = !(newPosition >= 0) && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",SEOI,0,
331,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a - b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
332,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m++ + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
337,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i == 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
342,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c-- )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
343,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || ++c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
345,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a - c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
346,"    public static java.lang.String wrap( java.lang.String str, int wrapLength )
    {
        return wrap( str, wrapLength, null, true );
    }",SEOR,0,
348,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse % x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
350,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position > maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,1,
351,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( ~c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
352,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian - 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
359,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return -ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
362,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) != 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
363,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i != strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",ROR,1,
365,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end--) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
366,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i *= Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SAR,0,
367,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c == maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
368,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; ~i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
371,"	public void addNode(int id, int rate, int coverage, int xPosition,",ADL,0,
373,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower--;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORS,0,
375,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 1);

  }",CR,0,
379,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = ++x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
381,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position > maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
382,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position-- );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
383,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m * x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
386,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i <= delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
389,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b != c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
391,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
395,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, ~max );
        quicksort( data, 0, data.length - 2 );
    }",LOI,0,
396,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= -1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
397,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (!(c <= maxDelimCodePoint) && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOI,0,
398,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b != 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
399,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] <= data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",ROR,1,
400,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 1);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,0,
402,"	public void addNode(int id, int rate, int coverage, int xPosition,",ROR,0,
404,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c++ ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,1,
408,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e <= 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
410,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
411,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (!(trian == 3 && b + c > a)) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
413,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position-- );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
415,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 0) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,0,
417,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex == array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
419,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( ++currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
422,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse + y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
424,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
426,"	public void addNode(int id, int rate, int coverage, int xPosition,",SEOR,0,
427,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i <= count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
428,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (--diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
429,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == -1) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,0,
431,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (--c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
432,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = ++temp;
                }
            }
        }
    }",AOIS,0,
433,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first - 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
436,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (~bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
437,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] == min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
438,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x / N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
445,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = ~last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
446,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (++position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
447,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + ++c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
449,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                ;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",ADL,0,
450,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (true) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",VDL,0,
453,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a - b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
454,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse % z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
455,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 0;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
456,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u - (1 << k); // gcd is u*2^k
    }",AORB,0,
457,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (!(a + b < c) || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
460,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count--;
        }
        return count;
    }",AORS,0,
461,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m / x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
463,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
464,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( --c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
466,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF-- == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
467,"    public  double sqrt( double N )
    {
        double x = N++;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
468,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (!(trian == 3) && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
469,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (--trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
470,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y - y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
471,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) > 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
472,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            ;
        }
        return s;
    }",FCDL,1,
473,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first++, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,1,
474,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+++(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
475,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt * 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
477,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper % 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
478,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
480,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : +(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
483,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= --maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
484,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i]--;
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
486,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == ~codePoint) {
                return true;
            }
        }
        return false;
    }",LOI,0,
487,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORB,1,
489,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a + b != c || a + c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
490,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( ++i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
491,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition--;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
492,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( -c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIU,0,
493,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (true) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",VDL,0,
494,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c++ <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
495,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] >= number) {
                    mytemp1 = a[i];
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",ROR,1,
496,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        ;
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",FCDL,0,
497,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * --x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
499,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 1) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",CR,0,
500,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last--;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
502,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 1, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",CR,0,
503,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 % ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AORB,1,
505,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 0) == 0 && (v & 0) == 0 && k < 30) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,0,
506,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound == data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
509,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i >= 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,1,
510,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last++) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
511,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( -i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIU,0,
512,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( ~currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",LOI,0,
515,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c != a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
516,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                if (trian == 3 && b % c > a) {
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
517,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c++ <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
520,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return true;
    }",SEOR,0,
523,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF-- > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
526,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (--a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
527,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position /= Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SAR,0,
529,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
   return(bonus--);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
531,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == -1) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AOIU,0,
532,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i == 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
533,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length % 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
534,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
            if (a + b < c || a + c < b || b + c < a) {
        if (trian == 1) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",CR,0,
535,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff++ < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
536,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a / b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
538,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower++]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
539,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return """";
    }",VDL,0,
543,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length / 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
544,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position++ );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
545,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 0)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,0,
546,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < --upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
548,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= -1) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
549,"    public  void setEpsilon( double epsilon )
    {
        this.mEpsilon = -epsilon;
    }",AOIU,0,
551,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= -1; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
552,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper++;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORS,0,
553,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 0;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
554,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a + b < c || a + c < b || b % c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
555,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower--]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
558,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition++;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
559,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive >= array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
560,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) > 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
561,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + ++b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
562,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = true;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",SEOR,0,
565,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper / 1, last );
        }
    }",AORB,0,
566,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( ~c );
                }
            }
        }
        return position;
    }",LOI,0,
569,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    ;
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",FCDL,0,
572,"	public static int main( int a, int b, int c ) {
		int mid;
		if (a < b) {
			if (c <= b) {
				if (a < c) {
					mid = c;
				} else {
					mid = a;
				}
			} else {
				mid = b;
			}
		} else {
			if (c > b) {
				if (a > c) {
					mid = c;
				} else {
					mid = a;
				}
			} else {
				mid = b;
			}
		}
		return mid;
	}",ROR,1,
573,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length * 1.5));
        for (int i = 0; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                ;
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",FCDL,0,
574,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i != 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,1,
575,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
                return ISOSCELES;
            if (trian >= 2 && a + c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
578,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOD,0,
582,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
585,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == -1 || delimLen == -1) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",AOIU,1,
586,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length - 1.5));
        for (int i = 0; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",AORB,0,
590,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c-- ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,1,
591,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (true) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",VDL,0,
592,"    private  int skipDelimiters( int startPos )
    {
        if (!(delimiters == null)) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",SEOI,0,
596,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( ++c );
                }
            }
        }
        return position;
    }",AOIS,0,
597,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c-- )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
598,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower > upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
603,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( ++We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
604,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        ;
        return subarray;
    }",FCDL,0,
606,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
        if (trian == 0 && a + b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",CR,0,
608,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a + b < c || a % c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
610,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a < c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
611,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) <= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
612,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[++upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
614,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                    return ISOSCELES;
                if (trian == 3 && b % c > a) {
                }
            }
        }
        return INVALID;
    }",AORB,0,
615,"    public  java.lang.String nextToken()
    {
        currentPosition = --newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
619,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c++ ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,1,
620,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse / y, -inverse * x, 0);

  }",AORB,0,
622,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",SEOD,0,
624,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(abs(i)-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ABSI,1,
626,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex <= 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
628,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian != 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
629,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) >= mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
630,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e-- == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
631,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian < 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
632,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) > 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
633,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && !(position < maxPosition)) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",SEOI,0,
634,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (-1 << k); // gcd is u*2^k
    }",AOIU,0,
635,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive != 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
636,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF <= 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
637,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) < mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
638,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == ~c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
641,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j / 1] = temp;
                }
            }
        }
    }",AORB,1,
642,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
643,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i];
        data[i] = data[j];
        data[j] = tmp--;
    }",AOIS,1,
645,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c-- < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
647,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize < 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,1,
648,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return ~position;
    }",LOI,0,
649,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 - We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AORB,1,
650,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = -1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
651,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i-- );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
654,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x % N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
658,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count--; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
659,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (!(c > maxDelimCodePoint || delimiters.indexOf( c ) < 0)) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",SEOI,0,
664,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length;  ) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return false;
    }",AODS,0,
666,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (++c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
667,"    public  void sort( int[] data )
    {
        if (data.length >= 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",ROR,0,
668,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c++ <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
671,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (++bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
672,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= ~upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
673,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + ~c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
674,"    public static  int classify( int a, int b, int c )
    {
        int trian;
            return INVALID;
        if (a <= 0 || b < 0 || c <= 0) {
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
679,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[++i] == codePoint) {
                return true;
            }
        }
        return false;
    }",AOIS,0,
680,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c != maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
681,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length + 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
683,"    public static  int classify( int a, int b, int c )
    {
        int trian;
            return INVALID;
        if (a < 0 || b <= 0 || c <= 0) {
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
684,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = number++;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
685,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
686,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2-- * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
690,"	public void addNode(int id, int rate, int coverage, int xPosition,",AOIU,0,
693,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind * tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
694,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive * startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
695,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m++ < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
696,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff >= 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
697,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c++ )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
698,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff < 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
699,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count++;
    }",AOIS,1,
701,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos != maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",ROR,0,
702,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims || startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOR,0,
704,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > --mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
705,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= ++upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
707,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] >= data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROR,0,
709,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition > 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",ROR,0,
710,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > ++maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
717,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(-1, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AOIU,0,
718,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x - x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
719,"	public void addNode(int id, int rate, int coverage, int xPosition,",VDL,0,
721,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( -c );
            }
        }
        return position;
    }",AOIU,0,
722,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a + b < c || a + c < b || b / c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
724,"    public  void sort( int[] data )
    {
        for (int i = 0; i-- < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
725,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) <= 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,0,
726,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, -last );
        }
    }",AOIU,0,
727,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a / b < c || a + c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
728,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < ++c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
729,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; !(i < delimiterCodePoints.length); i++) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return false;
    }",SEOI,0,
730,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i];
        data[i] = data[j++];
        data[j] = tmp;
    }",AOIS,0,
733,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a + b != c || a + c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",SEOR,0,
734,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (true) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROD,0,
735,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (--a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
738,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first / 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
740,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
742,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AODS,0,
743,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition-- : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
744,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive * startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
747,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z + z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
748,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 0;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
749,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i---1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
750,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length % 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AORB,0,
751,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length * 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
752,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = Math.abs(number);
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",ABSI,1,
755,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < --c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
756,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) != 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
757,"    public  void sort( int[] data )
    {
        for (int i = 0; i == data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROR,0,
758,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position == maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,1,
759,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 || a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOR,0,
760,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v * u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
762,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a / b < c || a + c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
763,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 1;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",CR,0,
766,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    ;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ADL,0,
769,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = -x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIU,0,
771,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
        if (trian <= 1 && a + b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",ROR,1,
774,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > ~maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",LOI,0,
775,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m <= c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,1,
777,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos <= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",ROR,0,
778,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind % tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
779,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j = Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",VDL,0,
780,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 % Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
781,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2-- - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
782,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+++(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
784,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize == 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
785,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e <= 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
786,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex != 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
787,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
789,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c < maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
790,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || !(delimiters.indexOf( c ) < 0)) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",SEOI,0,
791,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (!(Math.abs( diff ) > mEpsilon)) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",SEOI,0,
793,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( ~currentPosition );
        return newPosition < maxPosition;
    }",LOI,0,
794,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(abs(i)-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ABSI,1,
795,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+++(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
796,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j * 1] = temp;
                }
            }
        }
    }",AORB,1,
797,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
            trian = trian - 1;
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
798,"public static void main(int day, int month, int year)
{
	 int sum=0,leap;
	System.out.printf(""\n please input year,month,day\n"");
	switch(month)
	{	case 1:sum=0;
			break;
		case 2:sum=31;
			break;
		case 3:sum=59;
			break;
		case 4:sum=90;
			break;
		case 5:sum=120;
			break;
		case 6:sum=151;
			break;
		case 7:sum=181;
			break;
		case 8:sum=212;
			break;
		case 9:sum=243;
			break;
		case 10:sum=273;
			break;
		case 11:sum=304;
			break;
		case 12:sum=334;
			break;
		default:System.out.printf(""data error"");
			break; }
	sum=sum+day;
	if(year%400==0||(year%4==0&&year++%100!=0))
		leap=1;
	else
		leap=0;
	if(leap==1&&month>2)
		sum++;
	System.out.printf(""It is the %d th day."",sum);
}",AOIS,1,
800,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive != array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
802,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 1; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
805,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 || b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOR,0,
809,"    private  int scanToken( int startPos )
    {
        int position = ~startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
810,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 1, newSize);
        return subarray;
    }",CR,0,
813,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; ++j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
815,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength / offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
817,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ~ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
820,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition++ >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
823,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = ++c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
824,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (++m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
827,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length * 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
829,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b >= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
834,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (!(bound > data[lower])) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",SEOI,0,
835,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] >= codePoint) {
                return true;
            }
        }
        return false;
    }",ROR,0,
837,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength % offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
838,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y % (z * z));
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
840,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length / 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
841,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower != upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
842,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength % offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
845,"public static void main(int day, int month, int year)
{
	 int sum=0,leap;
	System.out.printf(""\n please input year,month,day\n"");
	switch(month)
	{	case 1:sum=0;
			break;
		case 2:sum=31;
			break;
		case 3:sum=59;
			break;
		case 4:sum=90;
			break;
		case 5:sum=120;
			break;
		case 6:sum=151;
			break;
		case 7:sum=181;
			break;
		case 8:sum=212;
			break;
		case 9:sum=243;
			break;
		case 10:sum=273;
			break;
		case 11:sum=304;
			break;
		case 12:sum=334;
			break;
		default:System.out.printf(""data error"");
			break; }
	sum=sum+day;
	if(year%400==0||(year%4==0&&year%100!=0))	if(leap==1&&month-->2)
		leap=1;
	else
		leap=0;
	if(leap==1&&month>2)
		sum++;
	System.out.printf(""It is the %d th day."",sum);
}",AOIS,1,
847,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize < 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
848,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1;; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROD,0,
850,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return 0;
    }",VDL,0,
853,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                    return ISOSCELES;
                if (trian >= 3 && b + c > a) {
                }
            }
        }
        return INVALID;
    }",ROR,1,
854,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e == 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
855,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
856,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a-- <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
858,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
860,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = -last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIU,0,
861,"    public  void setEpsilon( double epsilon )
    {
        this.mEpsilon = epsilon--;
    }",AOIS,1,
862,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = --i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
864,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = -1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIU,0,
865,"public static void main(int b, int c, int d, int e, int f)",AOIS,1,
867,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k <= 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,0,
869,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < -1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
872,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u ^ 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",LOR,0,
874,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a++ + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
877,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i++ < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
878,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (!(currpos >= maxPosition)) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",SEOI,0,
880,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                if (trian <= 3 && b + c > a) {
                }
            }
        }
        return INVALID;
    }

}",ROR,0,
881,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
        }
            trian = trian + -2;
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
882,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i%100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AORB,1,
884,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( ++c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
885,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i];
        data[~i] = data[j];
        data[j] = tmp;
    }",LOI,0,
887,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == codePoint--) {
                return true;
            }
        }
        return false;
    }",AOIS,0,
888,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[~i] == codePoint) {
                return true;
            }
        }
        return false;
    }",LOI,0,
889,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 0);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",CR,1,
892,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = false;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",SEOR,0,
895,"public static void main(int day, int month, int year)
{
	 int sum=0,leap;
	System.out.printf(""\n please input year,month,day\n"");
	switch(month)
	{	case 1:sum=0;
			break;
		case 2:sum=31;
			break;
		case 3:sum=59;
			break;
		case 4:sum=90;
			break;
		case 5:sum=120;
			break;
		case 6:sum=151;
			break;
		case 7:sum=181;
			break;
		case 8:sum=212;
			break;
		case 9:sum=243;
			break;
		case 10:sum=273;
			break;
		case 11:sum=304;
			break;
		case 12:sum=334;
			break;
		default:System.out.printf(""data error"");
			break; }
	sum=sum+day;
	if(year%400<=0||(year%4==0&&year%100!=0))
		leap=1;
	else
		leap=0;
	if(leap==1&&month>2)
		sum++;
	System.out.printf(""It is the %d th day."",sum);
}",ROR,1,
896,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 >> k); // gcd is u*2^k
    }",SOR,0,
899,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex <= 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
900,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, ~lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
902,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 1; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
906,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive + startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
907,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length * 1.5));
        for (int i = 0; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 0) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",CR,0,
909,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse + z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
910,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
911,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r--;
        return r;
    }",AOIS,0,
912,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive % startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
915,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 1;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",CR,0,
916,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[~j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",LOI,0,
917,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i---100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
918,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint && delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",SEOR,0,
920,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
        if (trian == 1) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",CR,0,
921,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i---400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
922,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i != delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return false;
    }",ROR,1,
923,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position >= maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,1,
924,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) * 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
930,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > ~b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
935,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length + 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORB,0,
936,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (true) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",VDL,0,
937,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = ~temp;
                }
            }
        }
    }",LOI,0,
938,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian - 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
941,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( ++We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
944,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = ++x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
945,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt / 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
947,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] != codePoint) {
                return true;
            }
        }
        return false;
    }",ROR,0,
948,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (~first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
949,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (~a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
952,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == --We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
953,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition == 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",ROR,0,
955,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request++ == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
958,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF != 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
959,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j %= Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SAR,0,
960,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count--];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
961,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > --maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
963,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive <= 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
964,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - -1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
965,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = 1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AODU,0,
966,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first++ + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
967,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j]--;
                        a[j] = mytemp1;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
970,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < -31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,0,
972,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x++;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
974,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (~c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
975,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse + x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
977,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",SEOD,0,
978,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c--) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
979,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
                return ISOSCELES;
            if (trian == 0 && a + c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",CR,0,
981,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position++ );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
982,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j == i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROR,0,
984,	public boolean removeNode(int nodeId),ROR,1,
985,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k >= 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,1,
989,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= -1) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,1,
990,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition--) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
991,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (!(trian == 2 && a + c > b)) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
993,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper - 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
994,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                 ;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ADL,0,
995,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = --c;
            }
        }
    }",AOIS,0,
997,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b == c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
998,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos != position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
999,"    public  void sort( int[] data )
    {
        for (int i = 0; i++ < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
1000,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (false) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",VDL,0,
1001,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == ++codePoint) {
                return true;
            }
        }
        return false;
    }",AOIS,0,
1002,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e-- > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1004,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( -c );
                }
            }
        }
        return position;
    }",AOIU,0,
1005,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
        }
            trian = trian * 3;
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1007,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[--max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
1008,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c >= escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,1,
1010,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return 0;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",VDL,0,
1011,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                 ;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ADL,0,
1012,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a >= b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1014,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + ~last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
1015,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound != data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
1016,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( ~start, currentPosition );
    }",LOI,0,
1017,"  public Vector3D orthogonal() {

    double threshold = -0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AOIU,0,
1018,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b++ <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1020,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[~i] = c;
            }
        }
    }",LOI,0,
1021,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && !(a + c > b)) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
1022,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y == threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",ROR,0,
1023,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition != 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",ROR,0,
1025,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
1033,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = ~i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",LOI,0,
1036,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && --a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1037,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u >= 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,1,
1038,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position *= Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SAR,0,
1039,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < --upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
1043,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 > ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
1045,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (true) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",VDL,0,
1047,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a--) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
1048,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt % 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
1049,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first * 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
1051,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length / 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
1052,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (~trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
1053,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - -1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
1055,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 - Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1056,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (--m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1057,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return 0;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",VDL,0,
1059,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian < 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1060,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length * 1.5));
        for (int i = 0; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length != 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",ROR,0,
1061,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = -r;
        return r;
    }",AOIU,1,
1062,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (!(m < c)) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SEOI,0,
1065,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c >= maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
1066,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a % b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1067,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (-m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIU,0,
1068,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive + startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
1069,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[~first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
1071,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a / c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1074,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i%1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AORB,1,
1076,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= --upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
1077,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x - z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1078,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 <= last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
1080,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (!(currpos < maxPosition)) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",SEOI,0,
1081,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i++-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
1083,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                ; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ADL,0,
1084,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[~j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",LOI,0,
1085,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position--) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
1088,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j-- > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
1089,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) - 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
1090,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                if (trian == 3 && b / c > a) {
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
1091,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b / c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1092,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e-- > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1095,	public boolean removeNode(int nodeId),AODU,0,
1096,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[~j - 1] = temp;
                }
            }
        }
    }",LOI,0,
1098,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
1099,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length * 1.5));
        for (int i = 0; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < -2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",AOIU,0,
1101,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a + b < c || a - c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1103,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (++bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
1104,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                 ;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ADL,0,
1105,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos++;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,1,
1106,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x % x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1107,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b > c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1108,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e >= 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
1111,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive <= 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1112,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff != 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
1114,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a + b < c || a - c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
1115,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, -1, newSize);
        return subarray;
    }",AOIU,0,
1116,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c <= b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1117,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, ~data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",LOI,0,
1120,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a + b < c || a * c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1121,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + ++x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
1122,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( -abs(We1_BA_DEF_ev_ctr3) - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ABSI,1,
1123,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex > array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1125,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max-- );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,1,
1127,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( --We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1128,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse / z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1131,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,1,
1132,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind % tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
1133,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[--j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
1134,	public boolean removeNode(int nodeId),FCDL,0,
1135,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( --i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1136,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF > 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
1137,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = -first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIU,0,
1138,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1139,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex == array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1140,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] > min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1142,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(1);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",CR,0,
1143,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max++ );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,1,
1145,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
1147,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper * 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
1150,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper - 1, last );
        }
    }",AORB,0,
1151,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i++ < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1152,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + ++c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1153,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i--];
        data[i] = data[j];
        data[j] = tmp;
    }",AOIS,0,
1154,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c-- < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1156,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == codePoint) {
                return false;
            }
        }
        return false;
    }",SEOR,0,
1157,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e >= 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
1161,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c > Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
1162,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian > 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1163,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition++ );
    }",AOIS,0,
1165,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, -first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIU,0,
1166,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian++ == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1167,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (!(a <= 0) || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
1168,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return 0;
    }",VDL,0,
1170,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                     ;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ADL,0,
1171,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = -trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
1172,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x + x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
1173,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive % startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
1174,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    ;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ADL,0,
1176,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind <= array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1181,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
            return EQUILATERAL;
        if (trian > 0) {
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",CR,0,
1186,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = --x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
1188,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j++ - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
1191,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
1192,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
   return(bonus++);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
1194,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian <= 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1196,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (false) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROD,0,
1197,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m % x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
1198,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive + startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
1200,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive != array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1203,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind / tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
1204,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            ;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ADL,0,
1205,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                if (trian >= 3 && b + c > a) {
                }
            }
        }
        return INVALID;
    }

}",ROR,1,
1206,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
1208,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k != 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,1,
1209,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b++ + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
1210,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length;) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AODS,0,
1212,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
1214,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (~b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
1220,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i > delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
1222,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= -1) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AOIU,0,
1224,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a > c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1225,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive != 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1228,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x - x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1229,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 1; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
1230,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i -= Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SAR,0,
1232,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian-- == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1233,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 1) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
1234,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                if (trian == 0 && b + c > a) {
                }
            }
        }
        return INVALID;
    }

}",CR,0,
1235,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c++ )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1237,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength - offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
1238,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) * 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
1239,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length + 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
1240,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos != maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",ROR,0,
1242,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
1243,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1244,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; ~j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",LOI,0,
1245,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && !(c <= Character.MAX_LOW_SURROGATE)) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SEOI,0,
1246,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, --upper + 1, last );
        }
    }",AOIS,0,
1247,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos++ < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
1248,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( -i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIU,0,
1250,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 0;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",CR,0,
1251,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff != 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
1254,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request-- == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1255,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b--) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1256,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength - offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
1257,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 0;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
1258,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition-- );
    }",AOIS,0,
1259,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff == 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
1260,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, +inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1261,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 1) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
1263,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1264,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
            if (a + b < c || a + c < b || b + c < a) {
        if (trian <= 0) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,1,
1265,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
1266,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 1) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,0,
1269,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    ;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",ADL,0,
1270,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive <= 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1271,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c && a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOR,0,
1272,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (!(c > maxDelimCodePoint) || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",SEOI,0,
1273,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse + y, -inverse * x, 0);

  }",AORB,0,
1275,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e < 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
1276,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y - y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1277,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (!(trian == 2) && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
1278,"    public  void sort( int[] data )
    {
        for (int i = 0; ~i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",LOI,0,
1281,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex > array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1283,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (--trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1285,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
1288,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive != array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1289,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
        if (trian == -1) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",CR,0,
1290,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = ++trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1291,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length * 1.5));
        for (int i = 1; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",CR,0,
1292,	public boolean removeNode(int nodeId),CR,0,
1293,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N++;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
1294,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) - Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
1295,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x % x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1297,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < -1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
1298,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex <= 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1300,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=abs(i)*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ABSI,1,
1301,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
             ;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ADL,0,
1302,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (~trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
1304,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF-- == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1307,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 1) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
1318,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c == maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
1319,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x + x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1320,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return -INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
1324,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition++ : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
1328,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
            trian = trian * 3;
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
1329,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e < 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
1332,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,1,
1334,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length / 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
1336,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize < 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1337,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
                return ISOSCELES;
            if (trian == 2 && a % c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1340,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < ~c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
1341,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length / 1.5));
        for (int i = 0; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",AORB,1,
1345,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c == Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
1346,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = -x;
        mResult = r;
        return r;
    }",AOIU,0,
1348,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (!(trian == 1 && a + b > c)) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
1349,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return -EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
1350,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < ++upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
1351,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= -1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
1352,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound > data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
1353,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive + startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
1355,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first++ + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
1357,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c == maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,1,
1358,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c != Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
1359,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 >>> k); // gcd is u*2^k
    }",SOR,0,
1365,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position--;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AORS,0,
1366,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b <= c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1367,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (++c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1368,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6--+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
1369,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first-- < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
1370,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= ++maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
1371,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i++-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
1372,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 0;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",CR,0,
1373,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = -startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIU,0,
1374,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive <= 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1376,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && ~b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
1378,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 0; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,0,
1379,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i >= delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
1380,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper--) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
1382,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count++; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1383,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = -x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIU,0,
1386,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - -1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
1387,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (false) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",VDL,0,
1388,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
            if (trian == 2 && a + c != b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",SEOR,0,
1389,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c == a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1390,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( ~c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",LOI,0,
1391,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize == 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1392,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a + b < c || a / c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1393,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i%200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AORB,1,
1395,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(abs(i)-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ABSI,1,
1397,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == ++c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1398,"	public static void main(String args[])
{
	int m,i,k,h=0,leap=1;
	System.out.print(""\n"");
	for(m=1;m<=5;m++)
	{
		k=(int)Math.sqrt(Math.abs(m)+1);
		for(i=2;i<=k;i++)
		{
			if(m%i==0)
			{
				leap=0;
				break;
			}
		}
		if(leap!=0)
		{
			System.out.printf(""%-4d"",m);
			h++;
			if(h%10==0)
				System.out.printf(""\n"");
		}
		leap=1;
	}
	System.out.printf(""\nThe total is %d"",h);
}",ABSI,1,
1401,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
1402,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive != 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1403,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c != b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1404,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = --x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
1405,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < -1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
1406,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",SEOD,0,
1408,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y / y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1409,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition++) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
1410,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last-- );
        }
    }",AOIS,1,
1413,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = ~c;
            }
        }
    }",LOI,0,
1414,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos > maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",ROR,0,
1416,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c >= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
1418,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + ~c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
1419,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = -c;
            }
        }
    }",AOIU,0,
1420,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x * (z * z));
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1421,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition <= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",ROR,0,
1422,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] < codePoint) {
                return true;
            }
        }
        return false;
    }",ROR,0,
1424,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
            trian = trian + 2;
        if (a <= c) {
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1425,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
1429,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e < 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
1430,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = --first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
1431,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = --We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1432,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j * 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORB,0,
1433,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
1437,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
1441,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + --c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1442,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x - y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1445,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c < maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
1447,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
1448,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        ;
        return subarray;
    }",FCDL,0,
1452,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / -2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIU,0,
1454,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength / offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
1459,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) % 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
1466,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? 1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",AODU,1,
1467,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (++c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
1468,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, --upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
1469,"    public  int countTokens()
    {
        int count = 0;
        int currpos = -currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIU,0,
1470,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; ++i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1471,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
            return ISOSCELES;
        if (trian == 1 && a % b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1472,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos <= maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",ROR,0,
1473,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound <= data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
1474,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[++count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1475,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize < 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1476,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( --currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
1478,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x++) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
1480,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i > 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1481,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, -currentPosition );
    }",AOIU,0,
1486,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( -position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIU,0,
1488,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
            if (trian == -2 && a + c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AOIU,0,
1489,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 + Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1490,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive >= array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1491,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( --We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1492,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( -j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIU,0,
1493,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i-- );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1494,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x--;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
1495,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF < 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
1497,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ROR,1,
1499,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
1500,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request-- > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1503,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
1504,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a >= c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1505,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,1,
1513,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first-- + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
1514,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b++ + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
1516,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                    return ISOSCELES;
                if (trian == 3 && b / c > a) {
                }
            }
        }
        return INVALID;
    }",AORB,0,
1518,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( ~c );
            }
        }
        return position;
    }",LOI,0,
1519,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex != 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1521,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= ++maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
1522,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 > last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
1523,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition--) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
1524,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) % Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
1525,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(1, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",CR,0,
1526,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound >= data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
1527,"public static void main(int day, int month, int year)
{
	 int sum=0,leap;
	System.out.printf(""\n please input year,month,day\n"");
	switch(month)
	{	case 1:sum=0;
			break;
		case 2:sum=31;
			break;
		case 3:sum=59;
			break;
		case 4:sum=90;
			break;
		case 5:sum=120;
			break;
		case 6:sum=151;
			break;
		case 7:sum=181;
			break;
		case 8:sum=212;
			break;
		case 9:sum=243;
			break;
		case 10:sum=273;
			break;
		case 11:sum=304;
			break;
		case 12:sum=334;
			break;
		default:System.out.printf(""data error"");
			break; }
	sum=sum+day;
	if(year%400==0||(year%4==0&&year--%100!=0))
		leap=1;
	else
		leap=0;
	if(leap==1&&month>2)
		sum++;
	System.out.printf(""It is the %d th day."",sum);
}",AOIS,1,
1528,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
        }
            trian = trian * 2;
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1531,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || --b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1532,"	public static int main( int a, int b, int c ) {
		int mid;
		if (a <= b) {
			if (c < b) {
				if (a < c) {
					mid = c;
				} else {
					mid = a;
				}
			} else {
				mid = b;
			}
		} else {
			if (c > b) {
				if (a > c) {
					mid = c;
				} else {
					mid = a;
				}
			} else {
				mid = b;
			}
		}
		return mid;
	}",ROR,1,
1534,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length + 2 );
    }",AORB,0,
1536,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c-- <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
1538,"    public  void sort( int[] data )
    {
        for (int i = 0; --i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
1539,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (false) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",VDL,0,
1541,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i;  ) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AODS,0,
1543,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (-first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIU,0,
1544,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = -m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIU,0,
1545,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z / z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1548,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse - z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1549,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( -currentPosition );
        return newPosition < maxPosition;
    }",AOIU,0,
1550,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2++ * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1553,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = ~trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
1554,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize < 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1555,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c < b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1556,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
            if (a + b < c || a + c < b || b + c < a) {
        if (trian == -1) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
1558,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return 0;
    }",VDL,0,
1559,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) > 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
1560,"  public Vector3D orthogonal() {

    double threshold = 0.6 / getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1561,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[-first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIU,0,
1562,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse + x, 0);

  }",AORB,0,
1563,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        ;
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",FCDL,0,
1564,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
            trian = trian + 0;
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",CR,0,
1565,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
1566,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
        if (a <= 0 || b <= 0 || c < 0) {
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",ROR,0,
1567,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; --i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
1568,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + ++x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
1569,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                if (trian == 3 && b * c > a) {
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
1570,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15-- )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1571,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k <= 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,1,
1573,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a++ <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1575,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c > 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1576,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
            return ISOSCELES;
        if (trian == 1 && a + b >= c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1577,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex > array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1579,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (!(lower < upper)) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",SEOI,0,
1580,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && ~startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
1581,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian != 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1583,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (!(c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE)) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SEOI,0,
1584,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt * 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
1587,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind >= array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1588,"    public  void setEpsilon( double epsilon )
    {
        this.mEpsilon = --epsilon;
    }",AOIS,0,
1589,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return newPosition < maxPosition--;
    }",AOIS,0,
1590,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
            return ISOSCELES;
        if (trian == 0 && a + b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",CR,0,
1591,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i == 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1592,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive != 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1593,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i++;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
1596,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first != upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
1599,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position++ );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
1600,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian <= 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1601,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint && !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",SEOR,0,
1602,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
1603,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (--a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1604,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (~upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
1605,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return !(newPosition < maxPosition);
    }",SEOI,0,
1606,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < ++maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
1608,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c >= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1609,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == ++c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1610,"public static int min(int I, int J)
{
	int Min;
    Min = I;
    if(J<I) {
 	   Min=J;}
    return Min--;
}",AOIS,1,
1611,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, -1, newSize);
        return subarray;
    }",AOIU,0,
1612,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (--diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
1614,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian < 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1615,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive != array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1616,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < -1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
1618,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( ~c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
1620,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e++ > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1624,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength != 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",ROR,0,
1626,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x + x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1629,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x % (z * z));
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1630,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b-- + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
1634,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex == array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1635,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition-- >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
1637,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (++lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
1638,"    public  double sqrt( double N )
    {
        double x = N--;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
1641,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() * 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AORB,0,
1644,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( -position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIU,0,
1645,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= --maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
1646,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length / 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
1647,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        trian = -1;
            trian = trian + 1;
        }",CR,0,
1648,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a + b < c || a + c < b || b % c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1650,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 == ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
1651,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z / z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1652,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint-- && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
1656,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c++ >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1658,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length % 2 );
    }",AORB,0,
1660,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; !(i < delimiters.length()); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SEOI,0,
1661,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return newPosition >= maxPosition;
    }",ROR,0,
1662,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] != data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",ROR,0,
1663,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & -1) == -1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,0,
1664,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; !(i < count); i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SEOI,0,
1665,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos++ >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
1667,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e-- == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1669,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c-- <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
1673,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / -2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIU,0,
1674,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return 0;
                }
            }
        }
        return INVALID;
    }",VDL,0,
1675,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i++ < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1676,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m >= c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
1681,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian >= 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1682,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c != maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,1,
1684,	public boolean removeNode(int nodeId),SEOR,0,
1685,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length * 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
1686,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse - y, -inverse * x, 0);

  }",AORB,0,
1687,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e++ == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1688,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < --count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1690,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c++) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1691,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + --b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1692,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength * offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
1695,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && ++startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
1697,	public boolean removeNode(int nodeId),ADL,0,
1698,"public static int min(int I, int J)
{
	int Min;
    Min = I;
    if(J<I) {
 	   Min=J++;}
    return Min;
}",AOIS,1,
1699,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive / startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
1700,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( abs(We1_BA_DEF_ev_ctr3) - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ABSI,1,
1701,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length * 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
1702,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (!(c > maxDelimCodePoint) || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",SEOI,0,
1703,"  public Vector3D orthogonal() {

    double threshold = 0.6 % getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1704,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound-- < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
1706,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 1, newSize);
        return subarray;
    }",CR,0,
1707,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || ~b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
1709,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= ~maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
1710,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE || c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SEOR,0,
1711,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (++b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1712,"public static void main(int day, int month, int year)
{
	 int sum=0,leap;
	System.out.printf(""\n please input year,month,day\n"");
	switch(month)
	{	case 1:sum=0;
			break;
		case 2:sum=31;
			break;
		case 3:sum=59;
			break;
		case 4:sum=90;
			break;
		case 5:sum=120;
			break;
		case 6:sum=151;
			break;
		case 7:sum=181;
			break;
		case 8:sum=212;
			break;
		case 9:sum=243;
			break;
		case 10:sum=273;
			break;
		case 11:sum=304;
			break;
		case 12:sum=334;
			break;
		default:System.out.printf(""data error"");
			break; }
	sum=sum+day;
	if(year%400==0||(year%4==0&&year%100!=0))	if(leap--==1&&month>2)
		leap=1;
	else
		leap=0;
	if(leap==1&&month>2)
		sum++;
	System.out.printf(""It is the %d th day."",sum);
}",AOIS,1,
1713,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c == maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
1715,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse / x, 0);

  }",AORB,0,
1717,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian != 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1718,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
1719,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() / 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AORB,0,
1726,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) - 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
1727,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c < Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
1730,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b >= c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1731,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j--];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
1732,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] > data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",ROR,0,
1733,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1736,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( ++We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1743,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower == upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
1744,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length % 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
1746,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                    return ISOSCELES;
                if (trian == 3 && b * c > a) {
                }
            }
        }
        return INVALID;
    }",AORB,0,
1747,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[--i] == codePoint) {
                return true;
            }
        }
        return false;
    }",AOIS,0,
1752,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a-- + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1753,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i <= data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",ROR,0,
1754,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || ~b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
1758,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; j++) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORS,0,
1761,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = ++r;
        return r;
    }",AOIS,0,
1763,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind >= array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1766,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( --c );
                }
            }
        }
        return position;
    }",AOIS,0,
1768,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length + 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
1769,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp--;
                }
            }
        }
    }",AOIS,1,
1770,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 1;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,0,
1773,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
                return ISOSCELES;
            if (trian == -2 && a + c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
1774,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 1, newSize);
        return subarray;
    }",CR,0,
1775,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 && b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOR,0,
1776,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m > c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
1777,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b / c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1778,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                 ;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ADL,0,
1780,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u * 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
1782,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition < maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",ROR,0,
1784,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == -1 && (v & 1) == -1 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,0,
1785,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = ++x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
1786,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= ++maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
1787,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive != array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1788,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length * 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
1789,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + --x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
1790,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, -upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIU,0,
1791,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z - z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1792,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > ++mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
1793,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2--+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
1795,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b == 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1797,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon++) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
1801,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a++) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
1804,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last++;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
1805,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j + 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORB,1,
1807,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
            if (trian >= 2 && a + c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",ROR,0,
1808,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; ++i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return false;
    }",AOIS,0,
1809,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, ++upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
1812,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( --i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1814,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex > array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1815,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i != count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,1,
1816,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i >= delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return false;
    }",ROR,0,
1817,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos < position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
1818,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return ~EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
1819,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive >= array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1820,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower > upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
1821,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, -1, newSize);
        return subarray;
    }",AOIU,0,
1822,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive != 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1823,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? ~newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",LOI,0,
1825,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= -1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
1826,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t | 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",LOR,0,
1827,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian <= 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1828,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (++c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
1831,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse - x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1832,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ROR,1,
1833,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
        }
            trian = trian - 2;
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1835,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j--] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
1837,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                if (trian == 3 && b + c != a) {
                }
            }
        }
        return INVALID;
    }

}",SEOR,0,
1841,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x % (y * y));
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1843,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + ++b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1844,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1846,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + ~b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
1848,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
1849,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
1851,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c++ > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
1852,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( ++j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1853,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive * startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
1855,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 0;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",CR,0,
1856,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length / 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
1857,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition <= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",ROR,0,
1858,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (++trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1862,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x--) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
1866,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( ~c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
1867,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) * ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AORB,1,
1869,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return ~newPosition < maxPosition;
    }",LOI,0,
1870,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( --We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1872,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
                return ISOSCELES;
            if (trian == 2 && a + c != b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1873,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a + b < c || a + c != b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1879,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y / y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1880,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (!(retDelims && startPos == position)) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOI,0,
1883,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b < c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1886,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x + N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
1888,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ~ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
1892,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition-- >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
1893,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize < 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
1894,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper % 1, last );
        }
    }",AORB,0,
1895,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a + b < c || a + c <= b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1897,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i---200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
1898,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x % x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
1899,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c != maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
1900,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
            if (trian == 2 && a % c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
1901,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind <= array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1902,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length + 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
1906,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (~c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",LOI,0,
1908,"    public static int gcd(int u, int v) {
        if (u * v <= 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,0,
1909,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( -position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIU,0,
1910,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength - 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
1911,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i];
        data[i] = data[j];
        data[j] = --tmp;
    }",AOIS,0,
1912,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z % z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
1916,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
            return ISOSCELES;
        if (trian == 1 && a + b != c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1918,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 1) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",CR,0,
1919,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + ~c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
1920,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max--] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
1922,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; --i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1923,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u + 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
1927,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[~j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",LOI,0,
1928,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian-- + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
1929,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && --confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1930,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF++ == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1932,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) >= 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
1933,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0-- >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
1934,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() % 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AORB,0,
1935,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || ++b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1938,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return newPosition-- < maxPosition;
    }",AOIS,0,
1939,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != -1);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,0,
1940,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint++ && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
1941,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() / 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AORB,0,
1943,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
            trian = trian + 3;
        if (b >= c) {
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
1944,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        ;
        return subarray;
    }",FCDL,0,
1945,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint-- && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
1948,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i == 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
1949,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j++ > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
1953,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) + ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AORB,1,
1955,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
            trian = trian * 2;
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
1959,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < ++maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
1960,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive / startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
1961,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c-- <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
1965,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; !(j > i); --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",SEOI,0,
1967,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (~m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
1969,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
1970,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
            trian = trian * 1;
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
1971,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b * c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1972,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a * b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
1974,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == ~c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
1978,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < ~delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return false;
    }",LOI,0,
1981,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i--]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
1982,"    public static int gcd(int u, int v) {
        if (u % v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
1983,"public static void main(int b, int c, int d, int e, int f)",ROR,1,
1985,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < -1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
1986,"	public static void main(String args[])
{
	int m,i,k,h=0,leap=1;
	System.out.print(""\n"");
	for(m=1;m<=5;m++)
	{
		k=(int)Math.sqrt(m*1);
		for(i=2;i<=k;i++)
		{
			if(m%i==0)
			{
				leap=0;
				break;
			}
		}
		if(leap!=0)
		{
			System.out.printf(""%-4d"",m);
			h++;
			if(h%10==0)
				System.out.printf(""\n"");
		}
		leap=1;
	}
	System.out.printf(""\nThe total is %d"",h);
}",AORB,1,
1987,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || --c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
1989,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) * 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
1990,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= -2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,0,
1991,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[-i];
        data[i] = data[j];
        data[j] = tmp;
    }",AOIU,0,
1992,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                ;
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",FCDL,0,
1993,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (true) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",VDL,0,
1994,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m++;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,1,
1995,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j-- - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
1996,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return -ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
1997,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count--;
    }",AOIS,1,
2000,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i--) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORS,0,
2002,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (++a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2006,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AORB,1,
2007,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = ~c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
2008,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a - b < c || a + c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2010,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= -1) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
2012,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b++ < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2013,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c != b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2017,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
2019,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i++-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
2020,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (!(trian == 0)) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
2021,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (++first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2022,"    public  void sort( int[] data )
    {
        for (int i = 0; i > data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROR,0,
2025,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first--];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2026,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length / 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
2028,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex <= 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2029,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && !(startPos == position)) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOI,0,
2030,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c++ <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
2032,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t != 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,0,
2033,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition--) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
2034,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u ^ 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",LOR,0,
2035,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c-- || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2036,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a % b < c || a + c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
2038,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive != 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
2040,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if ((a <= 0 || b <= 0) && c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOR,0,
2041,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1;  ) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AODS,0,
2043,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e <= 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
2044,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e-- > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2045,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex <= 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2047,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c == b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2049,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x / x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
2050,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) >= mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
2051,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) <= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
2052,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos--;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,1,
2053,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c >= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
2054,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first-- + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2056,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == -31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,1,
2058,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length % 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
2061,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x-- * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
2062,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition == maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",ROR,0,
2063,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a-- + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2066,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos <= position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
2068,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = ++c;
            }
        }
    }",AOIS,0,
2069,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = -1;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AOIU,0,
2071,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) == 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
2072,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper % 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
2073,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (--currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
2074,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c != maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
2075,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition++) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
2077,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M - x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
2079,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i++]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
2081,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( ~c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",LOI,0,
2082,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length;  ) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AODS,0,
2083,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, ~first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
2084,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position = Character.charCount( c );
            }
        }
        return position;
    }",VDL,0,
2085,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x-- - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
2089,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (true) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",VDL,0,
2090,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a / c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2091,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 == ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
2095,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
2097,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last--) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2099,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c++ || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2100,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (true) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROD,0,
2101,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos++ );
            count++;
        }
        return count;
    }",AOIS,1,
2103,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (~currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",LOI,0,
2104,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= ~maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",LOI,0,
2106,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) != mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",SEOR,0,
2109,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = -1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AOIU,0,
2111,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive <= 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
2112,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 0;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",CR,0,
2113,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (true) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",VDL,0,
2114,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper--, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2115,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < --maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
2116,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c == maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
2119,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( -position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIU,0,
2120,"    public  java.lang.String nextToken()
    {
        currentPosition = !(newPosition >= 0 && !delimsChanged) ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",SEOI,0,
2123,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b < 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2125,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound-- > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2126,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + -1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AOIU,0,
2127,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos == maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",ROR,0,
2128,"	public static int main( int a, int b, int c ) {
		int mid;
		if (a < b) {
			if (c < b) {
				if (a <= c) {
					mid = c;
				} else {
					mid = a;
				}
			} else {
				mid = b;
			}
		} else {
			if (c > b) {
				if (a > c) {
					mid = c;
				} else {
					mid = a;
				}
			} else {
				mid = b;
			}
		}
		return mid;
	}",ROR,1,
2129,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper / 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
2130,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && ++position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
2135,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j -= Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SAR,0,
2140,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i--; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
2141,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < -1) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIU,0,
2145,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (!(trian > 3)) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
2146,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff <= 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
2149,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position-- );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
2150,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (~a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
2151,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + ~c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
2153,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y < threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",ROR,0,
2154,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2155,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff == 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
2156,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a + b < c || a * c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
2157,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i];
        data[i] = data[j];
        data[j] = ++tmp;
    }",AOIS,0,
2158,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x * (y * y));
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
2159,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b++ == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2162,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
2163,"    public  boolean hasMoreElements()
    {
        return false;
    }",VDL,0,
2164,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
            return ISOSCELES;
        if (trian <= 1 && a + b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,1,
2165,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x < threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",ROR,0,
2168,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c++;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
2170,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (~lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
2173,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen >= 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",ROR,0,
2174,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10--+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
2177,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number++;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
2178,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt - 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
2179,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        ;
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",FCDL,0,
2181,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b-- > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2182,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = ~m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
2183,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x > -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",ROR,0,
2184,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a + b < c || a + c < b || b * c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
2185,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos++ == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,1,
2186,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e++ == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2187,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < -1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
2191,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF-- == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2195,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a > b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2196,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a + b < c || a + c < b || b * c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2197,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y > -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",ROR,0,
2199,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
        if (trian == 1 && a * b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
2203,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) + 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
2205,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request++ > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2206,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j-- - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
2207,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive != array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
2208,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive != array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
2209,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (!(c >= Character.MIN_HIGH_SURROGATE) && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SEOI,0,
2210,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse + z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
2212,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, -1, newSize);
        return subarray;
    }",AOIU,0,
2213,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( -currentPosition );
        return str.substring( start, currentPosition );
    }",AOIU,0,
2214,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 - Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
2215,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind >= array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2216,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - -1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
2218,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORB,0,
2219,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t >= 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,1,
2221,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian <= 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2222,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == --c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2225,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (--trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2226,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint-- || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
2230,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( --c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
2231,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (!(a == b)) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
2233,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 + ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AORB,1,
2237,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    ;
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",FCDL,0,
2240,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = -1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
2241,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
2243,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] <= data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROR,1,
2244,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + -32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AOIU,0,
2245,"public static void main(int b, int c, int d, int e, int f)",AORB,1,
2246,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - -1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
2247,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; ++i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
2249,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (!(data[j] < data[j - 1])) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",SEOI,0,
2250,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i >= count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
2252,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 1) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,0,
2253,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind <= array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2254,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a * c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2255,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a + b < c || a + c != b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",SEOR,0,
2256,"public static void main(int day, int month, int year)
{
	 int sum=0,leap;
	System.out.printf(""\n please input year,month,day\n"");
	switch(month)
	{	case 1:sum=0;
			break;
		case 2:sum=31;
			break;
		case 3:sum=59;
			break;
		case 4:sum=90;
			break;
		case 5:sum=120;
			break;
		case 6:sum=151;
			break;
		case 7:sum=181;
			break;
		case 8:sum=212;
			break;
		case 9:sum=243;
			break;
		case 10:sum=273;
			break;
		case 11:sum=304;
			break;
		case 12:sum=334;
			break;
		default:System.out.printf(""data error"");
			break; }
	sum=sum+day;
	if(year%400==0||(year%4==0&&year%100!=0))	if(leap==1&&month++>2)
		leap=1;
	else
		leap=0;
	if(leap==1&&month>2)
		sum++;
	System.out.printf(""It is the %d th day."",sum);
}",AOIS,1,
2257,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + --x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
2258,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
2259,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c-- );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,1,
2261,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive + startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
2265,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a == 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2266,"	public static void main(String args[])
{
	int m,i,k,h=0,leap=1;
	System.out.print(""\n"");
	for(m=1;m<=5;m++)
	{
		k=(int)Math.sqrt(m+1);
		for(i=2;i<=k;i++)
		{
			if(m%i==0)
			{
				leap=0;
				break;
			}
		}
		if(leap!=0)
		{
			System.out.printf(""%-4d"",m);
			h++;
			if(h%10==0)
				System.out.printf(""\n"");
		}
		leap=1;
	}
	System.out.printf(""\nThe total is %d"",h++);
}",AOIS,1,
2268,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 > ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
2269,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length % 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AORB,1,
2271,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N--;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
2273,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i%400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AORB,1,
2274,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i == 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2277,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper++]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2278,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        if (a == b) {
        trian = -1;
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
2279,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length % 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
2280,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x % x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
2282,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x % N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
2284,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y * (z * z));
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
2287,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position *= Character.charCount( c );
                }
            }
        }
        return position;
    }",SAR,0,
2289,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count++];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
2290,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= -1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
2291,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < ~data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",LOI,0,
2292,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return -ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
2293,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length * 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
2294,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF <= 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
2295,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b >= c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2296,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * (-abs(We1_BA_DEF_ev_ctr2)) - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ABSI,1,
2297,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
            return EQUILATERAL;
        if (trian > -3) {
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
2299,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = -currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIU,0,
2300,"    public  void sort( int[] data )
    {
        for (int i = 0; i < ~data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",LOI,0,
2301,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
        if (a >= c) {
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",ROR,0,
2303,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize == 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
2304,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 0;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",CR,0,
2305,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j % 1] = temp;
                }
            }
        }
    }",AORB,1,
2306,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(1);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",CR,0,
2308,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition != maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",ROR,0,
2310,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos-- );
            count++;
        }
        return count;
    }",AOIS,1,
2313,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
        if (trian >= 0) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2314,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c-- );
                }
            }
        }
        return position;
    }",AOIS,1,
2317,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
            trian = trian / 1;
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
2319,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return 0;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",VDL,0,
2320,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u | 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",LOR,0,
2323,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian > 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2327,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian * 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2328,"public static int min(int I, int J)
{
	int Min;
    Min = I;
    if(J<=I) {
 	   Min=J;}
    return Min;
}",ROR,1,
2329,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( -position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIU,0,
2332,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2334,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive * startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
2335,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j >= i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROR,1,
2336,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e != 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
2337,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition--) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
2340,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) >= 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,0,
2341,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        ;
        return subarray;
    }",FCDL,0,
2343,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
2345,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + --last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2348,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( --c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
2349,"    public static  int classify( int a, int b, int c )
    {
        int trian;
            return INVALID;
        if (a == 0 || b <= 0 || c <= 0) {
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2351,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = -1;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AOIU,0,
2358,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < ~maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",LOI,0,
2359,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian > 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2360,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( -start, currentPosition );
    }",AOIU,0,
2362,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e <= 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
2364,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian / 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2368,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > ~maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",LOI,0,
2369,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
        }
            trian = trian - 1;
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2370,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b != c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2373,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i--*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
2376,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length + 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
2378,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
2379,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse % z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
2385,"	public static int main( int a, int b, int c ) {
		int mid;
		if (a < b) {
			if (c < b) {
				if (a < c) {
					mid = c;
				} else {
					mid = a;
				}
			} else {
				mid = b;
			}
		} else {
			if (c >= b) {
				if (a > c) {
					mid = c;
				} else {
					mid = a;
				}
			} else {
				mid = b;
			}
		}
		return mid;
	}",ROR,1,
2386,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x - x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
2387,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0++ >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2388,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF < We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
2389,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize == 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
2390,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (!(c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0)) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOI,0,
2392,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e <= 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
2393,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i > 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2394,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength % 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,1,
2395,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
            return ISOSCELES;
        if (trian == -1 && a + b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
2402,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = ~currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",LOI,0,
2403,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive + startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
2406,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e >= 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
2407,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize == 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
2414,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a + b < c || a + c < b || b / c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
2415,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] >= data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",ROR,0,
2416,"	public void addNode(int id, int rate, int coverage, int xPosition,",FCDL,0,
2418,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                    return ISOSCELES;
                if (trian == -3 && b + c > a) {
                }
            }
        }
        return INVALID;
    }",AOIU,0,
2420,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m != c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
2421,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex > array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2422,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt % 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
2423,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length * 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
2424,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[--count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
2425,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= -1) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
2426,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = ++x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
2427,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0++ >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2428,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition++ );
        return newPosition < maxPosition;
    }",AOIS,0,
2431,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return +u * (1 << k); // gcd is u*2^k
    }",AORB,0,
2432,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (--trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2433,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,1,
2435,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if (Clip_15-- == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2436,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i++] == codePoint) {
                return true;
            }
        }
        return false;
    }",AOIS,0,
2438,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * abs(We1_BA_DEF_ev_ctr2) - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ABSI,1,
2439,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c++ > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
2440,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && !(b + c > a)) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
2441,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower++ < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2444,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c++) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2451,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x--;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
2452,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive >= array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
2457,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex == array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2459,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && ++c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
2462,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t < 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,0,
2463,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = -trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,1,
2464,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint || delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOR,0,
2465,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive % startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
2466,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 % Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
2468,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a + b < c || a + c < b || b - c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
2469,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M++ + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
2470,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
2477,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = ~startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",LOI,0,
2478,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i++ );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
2479,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian - 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2480,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= ~Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
2481,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] <= codePoint) {
                return true;
            }
        }
        return false;
    }",ROR,0,
2483,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last++) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2484,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() + 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AORB,0,
2486,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (~currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",LOI,0,
2490,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
2491,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c >= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
2494,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF++ == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2495,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i++ );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
2497,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = ~trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
2500,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c >= escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,1,
2501,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[--upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2503,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 1) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
2504,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
        if (trian == 1 && a % b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
2506,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian >= 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2511,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e == 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
2512,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex != 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2513,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 % Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
2514,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < --maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
2515,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return ++newPosition < maxPosition;
    }",AOIS,0,
2516,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if ((a + b < c || a + c < b) && b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOR,0,
2517,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a < b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2518,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position-- );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
2519,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = ++trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2521,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = -c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIU,0,
2524,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2528,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && ++confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2532,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[1] = temp;
                }
            }
        }
    }",AORB,0,
2535,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
        if (trian == -1 && a + b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AOIU,0,
2538,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - -1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AOIU,0,
2539,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian-- + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
2542,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = --trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2544,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= ~maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",LOI,0,
2545,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j != i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROR,1,
2546,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c > b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2547,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a != c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2551,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return newPosition > maxPosition;
    }",ROR,0,
2552,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length / 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORB,1,
2553,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || ~a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
2554,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i > 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2555,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse % y, -inverse * x, 0);

  }",AORB,0,
2556,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c >= dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,1,
2557,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = M + x - 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
2558,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 - We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AORB,1,
2559,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian * 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2561,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i <= delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return false;
    }",ROR,0,
2564,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (~a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
2565,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i;) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AODS,0,
2566,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
        }
            trian = trian % 3;
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2568,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
2572,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",SEOD,0,
2573,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M / x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
2575,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x++ - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
2578,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i];
        data[i] = data[j--];
        data[j] = tmp;
    }",AOIS,0,
2582,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (false) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROD,0,
2588,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition++) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
2589,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AODS,0,
2593,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c >= a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2594,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c <= dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,1,
2598,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 1) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
2600,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos-- );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,1,
2602,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i == 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2603,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive + startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
2604,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper++ );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORS,0,
2605,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i <= strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",ROR,0,
2606,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( ++confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2607,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j + 1] = temp;
                }
            }
        }
    }",AORB,1,
2609,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a <= c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2610,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos < maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",ROR,0,
2611,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon--) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
2612,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c++ <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2613,"	public void addNode(int id, int rate, int coverage, int xPosition,",CR,0,
2614,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (--c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
2615,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
        if (a <= b) {
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",ROR,0,
2619,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = --trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2620,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (--a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2621,"	public static int main( int a, int b, int c ) {
		int mid;
		if (a < b) {
			if (c < b) {
				if (a < c) {
					mid = c;
				} else {
					mid = a;
				}
			} else {
				mid = b;
			}
		} else {
			if (c > b) {
				if (a >= c) {
					mid = c;
				} else {
					mid = a;
				}
			} else {
				mid = b;
			}
		}
		return mid;
	}",ROR,1,
2625,"    public StringTokenizer( java.lang.String str, java.lang.String delim, boolean returnDelims )
    {
        currentPosition = 0;
        newPosition = -1;
        delimsChanged = false;
        this.str = str;
        maxPosition = str.length();
        delimiters = delim;
        retDelims = !returnDelims;
        setMaxDelimCodePoint();
    }",SEOI,0,
2626,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= ~maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
2629,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(1, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",CR,0,
2631,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian / 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2636,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && --startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
2637,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive % startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
2640,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (!(trian == 1) && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
2642,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex != 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2644,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]++);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
2646,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind >= array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2650,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[~i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",LOI,0,
2651,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i];
        data[i] = data[-j];
        data[j] = tmp;
    }",AOIU,0,
2654,"    public  boolean hasMoreElements()
    {
        return true;
    }",VDL,0,
2655,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( ++currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
2658,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = ++We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2659,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 0;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
2660,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= -1) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
2663,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (++diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
2668,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + --c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2669,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=abs(bonus4)+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ABSI,1,
2670,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e < 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
2671,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a++) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
2673,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e < 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
2675,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( ++c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
2676,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( ++i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
2677,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex != 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2678,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a % b < c || a + c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2680,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x--;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
2681,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a < 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2683,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint++ && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
2686,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
2689,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold <= 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",ROR,1,
2691,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower++ <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2694,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > ++maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
2696,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j++ - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
2698,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i == 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2699,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
        }
            trian = trian % 2;
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2701,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b != c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2702,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c == a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2703,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=abs(bonus6)+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ABSI,1,
2704,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 0;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,0,
2705,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 != last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
2708,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                ;
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",FCDL,0,
2709,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < -1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
2712,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (-M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIU,0,
2716,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return newPosition < ++maxPosition;
    }",AOIS,0,
2717,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex == array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2718,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (~bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
2720,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c == Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
2721,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v + u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
2722,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive % startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
2724,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 1, newSize);
        return subarray;
    }",CR,0,
2725,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j-- );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
2730,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / -2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,0,
2731,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c-- > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
2732,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e != 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
2734,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(-1, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AOIU,0,
2735,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (true) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROD,0,
2738,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] > data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROR,0,
2740,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff <= 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
2741,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = -1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AOIU,0,
2744,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
2745,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint || isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOR,0,
2746,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF-- == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2747,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c < 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2750,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= -1) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
2753,"public static void main(int b, int c, int d, int e, int f)",AOIS,1,
2755,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian <= 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2756,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
            return EQUILATERAL;
        if (trian >= 3) {
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2759,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v != 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,0,
2760,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( --We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2761,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && --b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2762,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
2763,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive <= 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,1,
2764,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, -upper + 1, last );
        }
    }",AOIU,0,
2765,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( ++currpos );
            count++;
        }
        return count;
    }",AOIS,0,
2766,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
2767,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos >= position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,1,
2768,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex <= 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2769,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
2770,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < ~last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
2773,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian != 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2774,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian > 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2775,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v >= 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,1,
2777,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
            trian = trian % 2;
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
2778,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + -8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AOIU,0,
2779,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian-- + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
2781,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2782,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first--, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,1,
2784,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a + b < c || a + c < b || b - c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2785,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return -INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
2786,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive != array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
2787,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper++ - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2791,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition++;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
2792,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position++ < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
2793,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if (Clip_15++ == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2794,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M % x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
2795,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length * 2 );
    }",AORB,0,
2796,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    ;
                }
            }
        }
        return buffer.toString();
    }",FCDL,0,
2797,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ~ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
2798,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length;) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return false;
    }",AODS,0,
2799,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive / startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
2800,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a + b <= c || a + c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",ROR,0,
2801,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (~c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
2803,"    public  int countTokens()
    {
        int count = 0;
        int currpos = ~currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",LOI,0,
2804,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length - 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AORB,0,
2805,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r++;
    }",AOIS,1,
2806,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c++ < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
2808,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last--) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2811,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
            return ISOSCELES;
        if (trian >= 1 && a + b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2812,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 1; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",CR,0,
2813,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x / (z * z));
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
2815,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper * 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
2817,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = -trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
2818,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper++, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2819,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff > 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
2820,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c-- <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2822,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
            trian = trian - 2;
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
2824,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = false;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",SEOR,0,
2825,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i == delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
2827,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i != data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",ROR,1,
2828,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j / 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORB,0,
2829,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() >= 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",ROR,0,
2830,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 >= last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
2831,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c > Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
2832,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - -1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AOIU,0,
2834,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c--) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2835,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower--, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORS,0,
2836,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length + 1.5));
        for (int i = 0; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",AORB,1,
2837,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,1,
2842,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( ~j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
2843,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]--);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
2844,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
2845,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition-- );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,1,
2846,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength / 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,1,
2847,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c < maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
2848,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        trian = 1;
            trian = trian + 1;
        }",CR,0,
2851,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1;
                        mytemp1 = mytemp2--;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
2853,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= ++maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
2854,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, first + last - 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
2855,"    public static  int classify( int a, int b, int c )
    {
        int trian;
            return INVALID;
        if (a <= -1 || b <= -1 || c <= -1) {
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
2856,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive + startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
2857,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i++ < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return false;
    }",AOIS,0,
2858,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y + y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
2859,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; --j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
2862,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] == data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROR,0,
2863,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(-1);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AOIU,0,
2865,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) + 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
2866,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
        if (trian <= 0) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,1,
2869,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = ++m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
2870,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a-- + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2872,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive <= 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
2873,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
2874,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c != maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
2877,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
2878,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a + b < c || a + c < b || b + c != a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2879,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < -1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
2880,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position <= maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
2882,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > --i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
2885,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & -1) == 0 && (v & -1) == 0 && k < 3-1) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,0,
2886,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c++) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
2887,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[-count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIU,0,
2888,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
            return ISOSCELES;
        if (trian == 1 && a - b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2889,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = m + x + 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
2890,"public static void main(int day, int month, int year)
{
	 int sum=0,leap;
	System.out.printf(""\n please input year,month,day\n"");
	switch(month)
	{	case 1:sum=0;
			break;
		case 2:sum=31;
			break;
		case 3:sum=59;
			break;
		case 4:sum=90;
			break;
		case 5:sum=120;
			break;
		case 6:sum=151;
			break;
		case 7:sum=181;
			break;
		case 8:sum=212;
			break;
		case 9:sum=243;
			break;
		case 10:sum=273;
			break;
		case 11:sum=304;
			break;
		case 12:sum=334;
			break;
		default:System.out.printf(""data error"");
			break; }
	sum=sum+day;
	if(year%400==0||(year%4==0&&year%100!=0))	if(leap>=1&&month>2)
		leap=1;
	else
		leap=0;
	if(leap==1&&month>2)
		sum++;
	System.out.printf(""It is the %d th day."",sum);
}",ROR,1,
2892,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
            if (trian == 2 && a * c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
2893,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength * offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
2897,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        if (a == b) {
        trian = 1;
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",CR,0,
2898,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3++ - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2900,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length + 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
2902,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < ~count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
2903,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c-- ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,1,
2905,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position = Character.charCount( c );
                }
            }
        }
        return position;
    }",VDL,0,
2906,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && ++error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2907,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < -1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
2908,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (0 << k); // gcd is u*2^k
    }",CR,0,
2911,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive >= array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,1,
2913,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (!(lower <= upper)) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",SEOI,0,
2914,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c != Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
2917,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c < maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
2918,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M * x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
2919,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF-- > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2921,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian == 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2922,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x++ - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
2923,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) + ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AORB,1,
2924,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (false) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",VDL,0,
2925,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b * c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2926,"    public  void sort( int[] data )
    {
        if (!(data.length < 2)) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",SEOI,0,
2927,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse % y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
2929,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[--i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
2930,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian++ + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
2931,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return ~position;
    }",LOI,0,
2932,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; ++i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
2934,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m == c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
2937,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i++-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
2938,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position %= Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SAR,0,
2940,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition < 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",ROR,0,
2941,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( ++c );
            }
        }
        return position;
    }",AOIS,0,
2942,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, ~upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
2945,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize < 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
2946,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) - 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
2947,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, ~upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
2948,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=abs(bonus1)+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ABSI,1,
2949,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N--;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
2950,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && ++a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2952,"public static void main(int b, int c, int d, int e, int f)",AORB,1,
2954,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e++ > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2956,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r--;
    }",AOIS,1,
2958,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - -1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
2960,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b-- < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2961,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= -1; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
2962,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold >= 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",ROR,0,
2963,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = -x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIU,0,
2965,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && --error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
2967,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c-- > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
2968,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e <= 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
2969,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
            if (trian <= 2 && a + c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",ROR,0,
2972,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint++ || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
2973,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last++ );
        }
    }",AOIS,1,
2975,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + --b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2976,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= -1) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
2977,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
            trian = trian % 1;
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
2978,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < -1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
2980,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i == delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return false;
    }",ROR,0,
2981,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (~c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
2982,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, ~upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
2983,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint-- && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
2987,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b == c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
2988,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (!(b == c)) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
2989,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (--first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
2991,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive * startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
2992,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b-- || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
2994,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2995,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind >= array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
2996,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < -1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
2997,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
        }
            trian = trian / 2;
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
2998,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3000,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition--;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
3002,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - -1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
3003,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (--c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
3004,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (!(c <= maxDelimCodePoint) && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOI,0,
3005,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
3008,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 - Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
3009,"	public static void main(String args[])
{
	int m,i,k,h=0,leap=1;
	System.out.print(""\n"");
	for(m=1;m<=5;m++)
	{
		k=(int)Math.sqrt(m/1);
		for(i=2;i<=k;i++)
		{
			if(m%i==0)
			{
				leap=0;
				break;
			}
		}
		if(leap!=0)
		{
			System.out.printf(""%-4d"",m);
			h++;
			if(h%10==0)
				System.out.printf(""\n"");
		}
		leap=1;
	}
	System.out.printf(""\nThe total is %d"",h);
}",AORB,1,
3010,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian++ == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3016,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp++;
                }
            }
        }
    }",AOIS,1,
3018,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                ;
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",FCDL,0,
3019,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (!(data[max] < data[i])) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",SEOI,0,
3020,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x * N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
3021,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (++a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3022,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i > 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3023,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
3025,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize == 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
3026,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j / 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORB,1,
3029,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex > array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3030,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (--b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3031,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF++ > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3034,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt == 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",ROR,0,
3035,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian >= 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3038,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || !(a + c < b) || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
3039,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = -1;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,0,
3041,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (!(position < maxPosition)) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOI,0,
3042,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive != 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
3043,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOD,0,
3044,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e++ == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3046,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x--) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
3047,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 1);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
3050,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt - 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
3051,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + ++last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3054,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!(!retDelims && position < maxPosition)) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",SEOI,0,
3055,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = +t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
3056,"public static int min(int I, int J)
{
	int Min;
    Min = I++;
    if(J<I) {
 	   Min=J;}
    return Min;
}",AOIS,1,
3058,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 0 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",CR,0,
3060,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m - x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
3061,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a % c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3064,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( --currpos );
            count++;
        }
        return count;
    }",AOIS,0,
3065,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF >= 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
3067,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c--) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3068,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( ++c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3069,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position++;
    }",AOIS,1,
3070,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition-- );
        return newPosition < maxPosition;
    }",AOIS,0,
3071,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen <= 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",ROR,0,
3073,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper * 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
3074,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j *= Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SAR,0,
3075,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (--c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3076,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters != null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
3078,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
            if (trian == 2 && a / c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
3079,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, -1, newSize);
        return subarray;
    }",AOIU,0,
3080,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind / tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
3081,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( --c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3082,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && !(a + b > c)) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
3085,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian * 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3087,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0-- >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3089,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == ++position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3091,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < ~b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
3092,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize == 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
3093,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a * c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3094,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (++trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3099,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex != 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3101,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength * offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
3102,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i--, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AORS,0,
3104,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive + startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
3105,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a <= b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3106,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c >= b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3107,"    public  java.lang.String nextToken()
    {
        currentPosition = ++newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,0,
3109,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first / last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
3111,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint-- || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
3113,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, ~first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
3114,"    public  java.lang.String nextToken()
    {
        currentPosition = ~newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",LOI,0,
3115,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (--M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
3116,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first * last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
3118,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian++ > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3119,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 1, newSize);
        return subarray;
    }",CR,0,
3121,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (!(first < upper - 1)) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",SEOI,0,
3122,"	public static void main(String args[])
{
	int m,i,k,h=0,leap=1;
	System.out.print(""\n"");
	for(m=1;m<=5;m++)
	{
		k=(int)Math.sqrt(m+1);
		for(i=2;i<=k;i++)
		{
			if(m%i==0)
			{
				leap=0;
				break;
			}
		}
		if(leap!=0)
		{
			System.out.printf(""%-4d"",Math.abs(m));
			h++;
			if(h%10==0)
				System.out.printf(""\n"");
		}
		leap=1;
	}
	System.out.printf(""\nThe total is %d"",h);
}",ABSI,1,
3123,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AORB,1,
3125,"    public  void sort( int[] data )
    {
        for (int i = 0; i != data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROR,1,
3127,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > -1) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,1,
3128,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > -1) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIU,1,
3129,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return ~INVALID;
    }",LOI,0,
3130,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c-- > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
3132,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper++) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3133,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c == b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3136,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position--;
    }",AOIS,1,
3139,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
        }
            trian = trian / 3;
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3140,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count--;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AORS,0,
3141,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m--;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,1,
3143,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    ;
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",FCDL,0,
3146,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first >= upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
3149,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x++;
        mResult = r;
        return r;
    }",AOIS,1,
3153,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c-- ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,1,
3154,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive * startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
3155,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( --j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
3157,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            ; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ADL,0,
3158,	public boolean removeNode(int nodeId),ROR,0,
3160,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = -i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIU,0,
3161,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) <= mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
3162,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j + 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORB,0,
3163,"  public Vector3D orthogonal() {

    double threshold = 0.0 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",CR,0,
3164,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper++) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3165,"    public  void sort( int[] data )
    {
        for (int i = 0; ++i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
3166,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && !(delimiters.indexOf( c ) >= 0)) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOI,0,
3167,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && --confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3168,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( ~position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",LOI,0,
3170,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request != 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
3172,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return ~SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
3175,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 0 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",CR,0,
3176,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
        }
            trian = trian * 1;
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3177,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,1,
3178,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e != 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
3179,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex != 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3180,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (~currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",LOI,0,
3181,"	public void addNode(int id, int rate, int coverage, int xPosition,",AOIU,0,
3182,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian % 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3183,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (false) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",VDL,0,
3185,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
3186,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
        }
            trian = trian + 0;
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",CR,0,
3187,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && ++confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3191,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
    	We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 % ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AORB,1,
3192,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i > delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return false;
    }",ROR,0,
3196,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex != 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3197,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (false) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROD,0,
3198,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition > maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",ROR,0,
3199,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    ;
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",FCDL,0,
3200,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c <= a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3202,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i > 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3203,"	public void addNode(int id, int rate, int coverage, int xPosition,",CR,1,
3204,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || --b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3208,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i++];
        data[i] = data[j];
        data[j] = tmp;
    }",AOIS,0,
3209,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < -1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AOIU,0,
3210,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = --m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
3213,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return ~count;
    }",LOI,0,
3215,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position++ < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
3216,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (!hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SEOI,0,
3218,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a % c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3220,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 1) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",CR,1,
3221,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    ;
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",FCDL,0,
3222,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( ~position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
3223,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position -= Character.charCount( c );
            }
        }
        return position;
    }",SAR,0,
3226,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * ++x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
3227,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > ~a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
3228,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3-- - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3231,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength * 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,1,
3233,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i = Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",VDL,0,
3234,"public static int min(int I, int J)
{
	int Min;
    Min = I;
    if(J<I) {
 	   Min=J--;}
    return Min;
}",AOIS,1,
3235,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i %= Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SAR,0,
3238,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
3239,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse % x, 0);

  }",AORB,0,
3240,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( ~c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
3241,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j % 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORB,0,
3242,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b-- + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
3245,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length + 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
3246,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 0;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
3248,"    public static int gcd(int u, int v) {
        if (u * v == 1) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,0,
3249,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength <= 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",ROR,1,
3250,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 || !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",SEOR,0,
3252,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position++ );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3254,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == ++b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3258,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive != 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
3260,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a++ + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3262,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper++ + 1, last );
        }
    }",AOIS,1,
3264,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = -1; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",AOIU,0,
3265,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive != 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
3266,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[++j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
3268,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive <= 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
3270,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u | 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",LOR,0,
3271,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF <= We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
3272,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c == maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
3273,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x / x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
3274,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c <= escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,1,
3275,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims || position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",SEOR,0,
3276,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
            trian = trian % 3;
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
3277,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) <= 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,1,
3278,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
   return(abs(bonus));
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ABSI,1,
3279,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first > upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
3282,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b <= c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3283,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first-- );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3284,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x + N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
3285,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position++ );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
3286,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
            trian = trian + 1;
        if (a <= b) {
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3287,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x++;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
3288,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
        }
            trian = trian - 3;
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3290,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) != mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
3293,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition++) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
3294,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c >= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
3295,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i > 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3296,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return newPosition < ~maxPosition;
    }",LOI,0,
3298,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (++M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
3299,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
        if (trian >= 1 && a + b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",ROR,0,
3300,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u / (1 << k); // gcd is u*2^k
    }",AORB,0,
3301,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= ~maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
3302,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y - z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
3303,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() <= 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",ROR,1,
3304,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a-- + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3306,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(abs(i)-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ABSI,1,
3307,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(-1);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AOIU,0,
3309,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b++ > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3310,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x + x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
3314,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (--upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3315,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex > array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3316,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (!(upper + 1 < last)) {
            quicksort( data, upper + 1, last );
        }
    }",SEOI,0,
3317,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = --trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3318,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
            trian = trian + 1;
        if (a >= b) {
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3321,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 == ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
3328,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (++first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3331,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        ;
        return subarray;
    }",FCDL,0,
3332,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (!retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOI,0,
3334,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= -1) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
3335,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * ++x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
3336,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position != maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
3339,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=abs(bonus2)+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ABSI,1,
3340,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive / startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
3342,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower-- <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3344,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c > a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3345,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return 0;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",VDL,0,
3346,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 > 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
3348,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, -data.length - 2 );
    }",AOIU,0,
3349,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first++ < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3350,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a--) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
3354,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 0) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,0,
3356,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
        }
            trian = trian + -3;
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
3357,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( --ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3362,"    public  void sort( int[] data )
    {
        for (int i = 0; i >= data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROR,0,
3365,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == --position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3366,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 0;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
3367,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev-- ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3369,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 1, newSize);
        return subarray;
    }",CR,0,
3371,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= -1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
3372,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (--currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
3374,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position++) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3376,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (!(c <= maxDelimCodePoint && isDelimiter( c ))) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOI,0,
3377,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower != upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
3380,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < ~a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
3382,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (++a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3384,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15++ )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3385,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt / 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
3386,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (++diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
3388,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? 0 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",AODU,0,
3392,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
            return ISOSCELES;
        if (trian == 1 && a / b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3393,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
        if (a == 0 || b <= 0 || c <= 0) {
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",ROR,0,
3396,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
3398,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && !(delimiters.indexOf( c ) >= 0)) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOI,0,
3399,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c++ )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,1,
3400,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length * 1.5));
        for (int i = 0; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[0]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",CR,0,
3401,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
            return EQUILATERAL;
        if (trian != 3) {
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3403,"    public  double sqrt( double N )
    {
        double x = -N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIU,0,
3406,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b % c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3409,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, -1, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AOIU,0,
3410,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length * 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
3412,"public static void main(int day, int month, int year)
{
	 int sum=0,leap;
	System.out.printf(""\n please input year,month,day\n"");
	switch(month)
	{	case 1:sum=0;
			break;
		case 2:sum=31;
			break;
		case 3:sum=59;
			break;
		case 4:sum=90;
			break;
		case 5:sum=120;
			break;
		case 6:sum=151;
			break;
		case 7:sum=181;
			break;
		case 8:sum=212;
			break;
		case 9:sum=243;
			break;
		case 10:sum=273;
			break;
		case 11:sum=304;
			break;
		case 12:sum=334;
			break;
		default:System.out.printf(""data error"");
			break; }
	sum=sum+day;
	if(year%400==0||(year%4==0&&year%100>0))
		leap=1;
	else
		leap=0;
	if(leap==1&&month>2)
		sum++;
	System.out.printf(""It is the %d th day."",sum);
}",ROR,1,
3413,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c-- > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3415,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c == 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3416,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + ++c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3418,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first--, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3419,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, ++upper + 1, last );
        }
    }",AOIS,0,
3420,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( ~position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
3421,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive % startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
3422,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
        }
            trian = trian / 1;
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3424,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (--bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3425,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + ~b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
3426,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a++ + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3427,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian++ + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
3428,"  public Vector3D orthogonal() {

    double threshold = 0.6 + getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
3430,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian-- > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3433,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position--;
    }",AOIS,1,
3434,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 - We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AORB,1,
3436,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( ~c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
3445,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 + Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
3448,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos > position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
3451,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N++;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
3452,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (!(diff < 0)) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",SEOI,0,
3453,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = -1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
3455,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x / (y * y));
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
3457,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[++j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
3458,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x * N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
3459,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c <= b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3460,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length * 1.5));
        for (int i = 0; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[1], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",CR,0,
3464,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a * b < c || a + c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3465,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset != wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",ROR,0,
3466,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                 ;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ADL,0,
3469,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian-- == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
3470,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (~trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
3472,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= --maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
3473,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] == max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3474,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = +v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
3476,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return -r;
    }",AOIU,0,
3477,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e == 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
3478,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i <= length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,0,
3479,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return --newPosition < maxPosition;
    }",AOIS,0,
3481,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex != 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3482,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b-- <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3484,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff++ > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
3485,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r++;
        return r;
    }",AOIS,0,
3487,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x-- - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
3488,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1++;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
3490,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (false) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",VDL,0,
3491,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) < 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
3493,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length * 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AORB,1,
3496,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs( ++diff ) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
3500,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c-- );
            }
        }
        return position;
    }",AOIS,1,
3502,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( ~i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
3503,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (--position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3504,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (false) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",VDL,0,
3505,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper--) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3506,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower-- < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3508,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 0;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
3510,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c-- )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3511,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (++trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3512,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length * 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
3513,	public boolean removeNode(int nodeId),ROR,1,
3514,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 == last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
3517,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - -1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
3518,"    public  void sort( int[] data )
    {
        if (data.length > 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",ROR,0,
3519,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position++ );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3521,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i];
        data[i] = data[j];
        data[j] = ~tmp;
    }",LOI,0,
3522,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= +threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
3523,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + --c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3524,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > ~i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",LOI,0,
3525,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper / 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
3526,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a != 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3527,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, -first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIU,0,
3528,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 > ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
3530,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex > array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3531,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 1, newSize);
        return subarray;
    }",CR,0,
3533,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i];
        data[i] = data[j];
        data[~j] = tmp;
    }",LOI,0,
3534,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, -max );
        quicksort( data, 0, data.length - 2 );
    }",AOIU,0,
3535,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length % 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
3537,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (++c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
3538,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i-- < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return false;
    }",AOIS,0,
3539,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first++ );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3540,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( --c );
            }
        }
        return position;
    }",AOIS,0,
3541,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev++ ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3542,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z - z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
3544,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (--lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3545,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < ++count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
3548,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, -1, newSize);
        return subarray;
    }",AOIU,0,
3549,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) / Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
3550,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || !(b <= 0) || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
3551,	public boolean removeNode(int nodeId),AOIU,0,
3552,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = --x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
3553,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 0;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,0,
3554,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper++ - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3555,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition++ );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIS,1,
3556,"    public static java.lang.String capitalize( java.lang.String str, char[] delimiters )
    {
        int delimLen = delimiters == null ? -1 : delimiters.length;
        if (str == null || str.length() == 0 || delimLen == 0) {
            return str;
        }
        int strLen = str.length();
        java.lang.StringBuffer buffer = new java.lang.StringBuffer(strLen);
        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (isDelimiter(ch, delimiters)) {
                buffer.append(ch);
                capitalizeNext = true;
            } else {
                if (true) {
                    buffer.append(Character.toTitleCase( ch ));
                    capitalizeNext = false;
                } else {
                    buffer.append(ch);
                }
            }
        }
        return buffer.toString();
    }",VDL,0,
3557,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length / 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
3561,"	public static void main(String args[])
{
	int m,i,k,h=0,leap=1;
	System.out.print(""\n"");
	for(m=1;m<=5;m++)
	{
		k=(int)Math.sqrt(m+1);
		for(i=2;i<=k;i++)
		{
			if(m%i==0)
			{
				leap=0;
				break;
			}
		}
		if(leap!=0)
		{
			System.out.printf(""%-4d"",m);
			h++;
			if(h%10==0)
				System.out.printf(""\n"");
		}
		leap=1;
	}
	System.out.printf(""\nThe total is %d"",h--);
}",AOIS,1,
3562,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c <= dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,1,
3564,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters != null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
3565,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() + 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AORB,0,
3566,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = -1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
3569,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length * 1.5));
        for (int i = 0; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                ;
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",FCDL,0,
3570,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e++ > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3571,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < -1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
3572,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian++ == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
3573,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 1) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
3574,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, ~first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
3575,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (++trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3576,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = ++i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
3577,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) >= 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,1,
3578,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian % 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3580,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a % b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3581,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2++ - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3582,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 * Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
3584,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a + b < c || a % c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3587,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i--] == codePoint) {
                return true;
            }
        }
        return false;
    }",AOIS,0,
3588,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && ++error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3590,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v / u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
3591,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
        if (a <= 0 || b == 0 || c <= 0) {
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",ROR,0,
3593,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower <= upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
3594,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 0) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,1,
3596,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = -temp;
                }
            }
        }
    }",AOIU,0,
3598,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a - c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3601,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = --c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
3602,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position -= Character.charCount( c );
                }
            }
        }
        return position;
    }",SAR,0,
3603,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (!(c > maxDelimCodePoint || !isDelimiter( c ))) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",SEOI,0,
3605,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = ++x;
        mResult = r;
        return r;
    }",AOIS,0,
3606,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < --maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
3609,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i--;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
3610,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = ++trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3613,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (!(currentPosition >= maxPosition)) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",SEOI,0,
3615,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + -1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AOIU,0,
3616,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c++ > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
3617,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[~lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
3618,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength / offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
3619,"    public static  int classify( int a, int b, int c )
    {
        int trian;
            return INVALID;
        if (a <= 0 || b == 0 || c <= 0) {
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3622,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y == -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",ROR,0,
3623,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N--;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
3624,	public boolean removeNode(int nodeId),ROR,0,
3625,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x++) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
3626,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
3627,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i++-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
3629,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b >= c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3630,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = M + x + 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
3631,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
        }
            trian = trian + 0;
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",CR,0,
3633,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
        if (a <= 0 || b <= 0 || c == 0) {
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",ROR,0,
3634,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c != a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3635,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e-- > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3636,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
3638,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = ~first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
3640,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j++ );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
3641,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c >= a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3642,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive % startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
3643,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request <= 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
3649,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = -x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIU,1,
3650,"    private  int scanToken( int startPos )
    {
        int position = startPos--;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3651,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( -c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIU,0,
3653,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - -1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
3656,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian < 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3657,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return -INVALID;
    }",AOIU,0,
3658,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c-- <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3660,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() % 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AORB,0,
3661,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return 0;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",VDL,0,
3662,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (--m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
3664,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b++ || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3665,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper-- - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3667,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (++c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3669,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c >= b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3672,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c <= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
3673,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos >= maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",ROR,0,
3674,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c++ )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3676,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u % 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
3677,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start--, currentPosition );
    }",AOIS,1,
3678,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c >= dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,1,
3681,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = -1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AOIU,0,
3683,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i]++;
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
3685,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper + 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
3686,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j <= i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROR,0,
3688,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < -1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
3689,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && ~a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
3690,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian < 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3691,"	public void addNode(int id, int rate, int coverage, int xPosition,",ROR,0,
3693,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint || isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOR,0,
3695,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 + Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
3697,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position >= maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
3698,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u - 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
3699,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b - c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3700,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a-- == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3701,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return newPosition != maxPosition;
    }",ROR,0,
3702,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return -SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
3703,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a != b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3704,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper++ + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3709,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength * offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
3710,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive <= 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
3711,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= -1) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
3713,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i%600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AORB,1,
3714,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( ~currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",LOI,0,
3715,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
        if (trian == 1 && a + b != c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",SEOR,0,
3716,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, -upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIU,0,
3717,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a + b < c || a / c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
3719,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (!(delimiterCodePoints[i] == codePoint)) {
                return true;
            }
        }
        return false;
    }",SEOI,0,
3720,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < ~maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
3721,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[++j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
3723,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4--+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
3724,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position %= Character.charCount( c );
                }
            }
        }
        return position;
    }",SAR,0,
3726,"    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i == 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3727,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint++ || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
3728,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
3730,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF++ == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3731,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b++) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3733,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse / y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
3734,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
        }
            trian = trian + -1;
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIU,0,
3736,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position /= Character.charCount( c );
                }
            }
        }
        return position;
    }",SAR,0,
3737,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == --b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3738,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c-- >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
3739,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,1,
3740,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && --a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3742,"    private  void setMaxDelimCodePoint()
    {
        if (!(delimiters == null)) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SEOI,0,
3743,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength / offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
3745,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] != data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROR,0,
3746,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive >= array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
3747,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex != 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3748,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b < c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3751,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs( --diff ) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
3753,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, ~last );
        }
    }",LOI,0,
3756,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; true; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",ROD,0,
3758,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b++) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3759,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind + tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
3762,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end++) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
3764,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
3765,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= -2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,0,
3766,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a - b < c || a + c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
3767,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex == array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3769,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 0) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",CR,0,
3770,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound == data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
3773,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound >= data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
3774,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
3775,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u % (1 << k); // gcd is u*2^k
    }",AORB,0,
3777,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[~j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",LOI,0,
3779,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x / x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
3781,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                    return ISOSCELES;
                if (trian == 3 && b + c >= a) {
                }
            }
        }
        return INVALID;
    }",ROR,0,
3783,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < ~c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
3784,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[-j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIU,0,
3785,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length * 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AORB,1,
3786,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = -abs(We1_BA_DEF_ev_ctr2) * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ABSI,1,
3787,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= -1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
3788,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        ;
        return subarray;
    }",FCDL,0,
3789,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = --r;
        return r;
    }",AOIS,0,
3792,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i != length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,1,
3793,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e >= 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
3794,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; ~i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
3795,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (!(a <= 0 || b <= 0) || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
3796,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < ++maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3797,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c--) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3799,"    public static  int classify( int a, int b, int c )
    {
        int trian;
            return INVALID;
        if (a <= 0 || b <= 0 || c == 0) {
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3802,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i---600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
3803,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length % 1.5));
        for (int i = 0; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",AORB,1,
3804,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c++ <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
3805,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / -2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,0,
3807,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian / 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3808,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
        if (trian > 0) {
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",CR,0,
3809,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind >= array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3810,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return -position;
    }",AOIU,0,
3813,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=abs(bonus10)+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ABSI,1,
3814,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ROR,1,
3815,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= ++maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3816,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex <= 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3817,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs( diff-- ) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
3818,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",CR,0,
3819,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (!(a <= 0 || b <= 0 || c <= 0)) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
3822,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length + 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
3823,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
3825,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
             ;
        }
        return count;
    }",ADL,0,
3826,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper + 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
3828,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
3829,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= -1; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
3830,"public static void main(int day, int month, int year)
{
	 int sum=0,leap;
	System.out.printf(""\n please input year,month,day\n"");
	switch(month)
	{	case 1:sum=0;
			break;
		case 2:sum=31;
			break;
		case 3:sum=59;
			break;
		case 4:sum=90;
			break;
		case 5:sum=120;
			break;
		case 6:sum=151;
			break;
		case 7:sum=181;
			break;
		case 8:sum=212;
			break;
		case 9:sum=243;
			break;
		case 10:sum=273;
			break;
		case 11:sum=304;
			break;
		case 12:sum=334;
			break;
		default:System.out.printf(""data error"");
			break; }
	sum=sum+day;
	if(year%400==0||(year%4<=0&&year%100!=0))
		leap=1;
	else
		leap=0;
	if(leap==1&&month>2)
		sum++;
	System.out.printf(""It is the %d th day."",sum);
}",ROR,1,
3831,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 1) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,0,
3832,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
                return ISOSCELES;
            if (trian == 2 && a + c >= b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3833,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
3836,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M-- + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,1,
3837,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() * 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AORB,0,
3838,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( ~c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
3840,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; --i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
3842,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
        if (trian == 1 && a / b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
3843,"    public static int gcd(int u, int v) {
        if (u / v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
3844,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c--;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
3845,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a-- == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3846,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[++i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
3848,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex <= 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3849,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < -1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
3850,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
            trian = trian / 2;
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
3853,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (--trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3854,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (~c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",LOI,0,
3855,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition++ );
        return str.substring( start, currentPosition );
    }",AOIS,1,
3856,"    public  double sqrt( double N )
    {
        double x = N;
        double M = -N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIU,0,
3857,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( ~position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
3860,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i > 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3861,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind >= array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3863,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) % 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
3864,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos > maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",ROR,0,
3865,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position -= Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SAR,0,
3866,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( --currentPosition );
        return newPosition < maxPosition;
    }",AOIS,0,
3868,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j++] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
3875,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; ~i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return false;
    }",LOI,0,
3876,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + --c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3877,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt > offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",ROR,1,
3880,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c >= maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
3881,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && --c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
3882,"	public static void main(String args[])
{
	int m,i,k,h=0,leap=1;
	System.out.print(""\n"");
	for(m=1;m<=5;m++)
	{
		k=(int)Math.sqrt(m+1);
		for(i=2;i<=k;i++)
		{
			if(m%i==0)
			{
				leap=0;
				break;
			}
		}
		if(leap!=0)
		{
			System.out.printf(""%-4d"",m);
			h++;
			if(h%10==0)
				System.out.printf(""\n"");
		}
		leap=1;
	}
	System.out.printf(""\nThe total is %d"",Math.abs(h));
}",ABSI,1,
3883,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian++ + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,1,
3886,"public static void main(int b, int c, int d, int e, int f)",AOIS,1,
3887,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
                return ISOSCELES;
            if (trian == 2 && a * c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3888,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex == array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3889,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+++(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
3892,"    public  void sort( int[] data )
    {
        for (int i = 0; !(i < data.length - 1); i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",SEOI,0,
3893,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c++ < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3894,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b > c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3896,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian-- == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
3899,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition-- );
        return str.substring( start, currentPosition );
    }",AOIS,1,
3900,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c++;
            }
        }
    }",AOIS,0,
3901,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive * startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
3905,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = number--;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
3906,"    private  int scanToken( int startPos )
    {
        int position = startPos++;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3907,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x++;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
3908,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position-- );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
3909,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= --maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3912,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = ++first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3913,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x++ * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
3914,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind * tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
3915,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound != data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
3916,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < -1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
3918,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c < maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
3919,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m-- + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
3921,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (++c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3922,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive / startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
3925,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (++upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3926,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (--c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
3929,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
        }
            trian = trian + 0;
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",CR,0,
3931,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength + offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
3933,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, -1, newSize);
        return subarray;
    }",AOIU,0,
3934,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
3935,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
        if (a >= b) {
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",ROR,0,
3936,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) + 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
3938,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+++(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
3939,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i == 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3941,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == codePoint++) {
                return true;
            }
        }
        return false;
    }",AOIS,0,
3942,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper--]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3943,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b - c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3944,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v % u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
3945,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper-- + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3946,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( ~c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
3948,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind <= array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
3952,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first - last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
3954,"	public void addNode(int id, int rate, int coverage, int xPosition,",VDL,0,
3955,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && ~a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
3958,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i];
        data[i] = data[++j];
        data[j] = tmp;
    }",AOIS,0,
3959,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length / 2 );
    }",AORB,0,
3960,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF <= 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
3961,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[--j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
3962,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
3963,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 1) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
3964,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c <= a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3967,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < -1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
3968,"    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = -1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_INT_ARRAY;
        }

        int[] subarray = new int[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
3969,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i == count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
3971,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i <= length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,0,
3972,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                if (trian == 3 && b - c > a) {
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
3973,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a + b <= c || a + c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3974,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (--c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
3975,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x--;
        mResult = r;
        return r;
    }",AOIS,1,
3977,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive >= array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
3979,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length * 1.5));
        for (int i = 0; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[-1], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",AOIU,0,
3980,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian >= 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
3981,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive / startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
3982,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c < Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
3983,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < ~maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",LOI,0,
3984,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length * 1.5));
        for (int i = 0; i != array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",ROR,1,
3985,"    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize == 0) {
            return EMPTY_BYTE_ARRAY;
        }

        byte[] subarray = new byte[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
3986,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( ++We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
3987,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = -1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AOIU,0,
3988,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
3991,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c++ );
            }
        }
        return position;
    }",AOIS,1,
3993,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper-- - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
3995,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length * 1.5));
        for (int i = 0; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length <= 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",ROR,0,
3996,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a * b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
3997,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( ~currpos );
            count++;
        }
        return count;
    }",LOI,0,
3999,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 * Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
4000,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b % c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
4001,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian++ == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
4002,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1--+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
4003,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i--) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AORS,0,
4004,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= ~maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
4005,"    public StringTokenizer( java.lang.String str, java.lang.String delim, boolean returnDelims )
    {
        currentPosition = 0;
        newPosition = 1;
        delimsChanged = false;
        this.str = str;
        maxPosition = str.length();
        delimiters = delim;
        retDelims = returnDelims;
        setMaxDelimCodePoint();
    }",AODU,0,
4007,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x-- * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
4009,"public static void main(int b, int c, int d, int e, int f)",AOIS,1,
4010,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 1) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,1,
4012,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return 0;
    }",VDL,0,
4014,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(+inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
4015,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                ;
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",FCDL,0,
4018,"    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= -1; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
4019,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? -newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIU,0,
4023,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize < 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
4024,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = -1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AOIU,0,
4026,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength % offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
4030,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive / startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
4031,"    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }

        boolean[] subarray = new boolean[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
4032,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first++, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
4034,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, -1, newSize);
        return subarray;
    }",AOIU,0,
4036,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c++) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
4037,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse - x, 0);

  }",AORB,0,
4038,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i == 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
4039,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive / startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
4040,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return newPosition <= maxPosition;
    }",ROR,0,
4043,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length % 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
4045,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, ~data.length - 2 );
    }",LOI,0,
4046,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
            if (trian == 0 && a + c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",CR,0,
4050,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a * b < c || a + c < b || b + c < a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
4053,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i <= length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,0,
4055,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ROR,1,
4056,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( -currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIU,0,
4059,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
            if (a + b < c || a + c < b || b + c != a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",SEOR,0,
4062,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = Math.abs(a[2]);
        if (number >= end) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",ABSI,1,
4064,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j /= Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SAR,0,
4067,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v | 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",LOR,0,
4068,	public boolean removeNode(int nodeId),AODU,0,
4070,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first <= upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
4071,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i > 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
4072,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( ~position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",LOI,0,
4073,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position-- < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
4077,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex > array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
4079,"    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < -1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
4080,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF++ == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
4082,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return ~INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
4083,"    public static int gcd(int u, int v) {
        if (u + v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
4084,"    public  java.lang.String nextToken( java.lang.String delim )
    {
        delimiters = delim;
        delimsChanged = true;
        setMaxDelimCodePoint();
        return """";
    }",VDL,0,
4085,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; ~i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",LOI,0,
4087,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 / ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AORB,1,
4089,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i++*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(i-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",AOIS,1,
4091,"    public static int gcd(int u, int v) {
        if (u * v == -1) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,0,
4093,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e <= 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
4095,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, -first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIU,0,
4097,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c-- )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,1,
4098,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        ;
        return subarray;
    }",FCDL,0,
4103,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & -1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,0,
4105,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length * 1.5));
        for (int i = 0; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[-1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",AOIU,0,
4106,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (--bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
4107,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint || delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOR,0,
4110,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position--;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AORS,0,
4111,"    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive >= array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_LONG_ARRAY;
        }

        long[] subarray = new long[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
4112,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 0;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",CR,0,
4114,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[~count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
4116,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( -c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIU,0,
4117,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length + 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
4121,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint++ && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
4124,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || --a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
4125,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 0;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",CR,0,
4126,"    public  void sort( int[] data )
    {
        if (data.length == 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",ROR,0,
4127,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || ++b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
4128,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first % last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
4129,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c--;
            }
        }
    }",AOIS,0,
4130,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b-- == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
4131,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < -1) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,1,
4132,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (!(a + b < c || a + c < b || b + c < a)) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
4133,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( ~position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
4135,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t > 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,0,
4137,"public static void main(int day, int month, int year)
{
	 int sum=0,leap;
	System.out.printf(""\n please input year,month,day\n"");
	switch(month)
	{	case 1:sum=0;
			break;
		case 2:sum=31;
			break;
		case 3:sum=59;
			break;
		case 4:sum=90;
			break;
		case 5:sum=120;
			break;
		case 6:sum=151;
			break;
		case 7:sum=181;
			break;
		case 8:sum=212;
			break;
		case 9:sum=243;
			break;
		case 10:sum=273;
			break;
		case 11:sum=304;
			break;
		case 12:sum=334;
			break;
		default:System.out.printf(""data error"");
			break; }
	sum=sum+day;
	if(year%400==0||(year%4==0&&year%100!=0))	if(leap++==1&&month>2)
		leap=1;
	else
		leap=0;
	if(leap==1&&month>2)
		sum++;
	System.out.printf(""It is the %d th day."",sum);
}",AOIS,1,
4139,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        ;
        return wrappedLine.toString();
    }",FCDL,0,
4142,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i > data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",ROR,0,
4144,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (false) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROD,0,
4146,	public boolean removeNode(int nodeId),AODU,0,
4148,"    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive * startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_FLOAT_ARRAY;
        }

        float[] subarray = new float[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",AORB,0,
4149,"    public  void sort( int[] data )
    {
        if (data.length <= 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",ROR,0,
4150,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
4151,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower--;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORS,0,
4153,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u + (1 << k); // gcd is u*2^k
    }",AORB,0,
4157,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i];
        data[i] = data[--j];
        data[j] = tmp;
    }",AOIS,0,
4162,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i /= Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",SAR,0,
4164,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[~j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",LOI,0,
4165,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (~trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
4166,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return -position;
    }",AOIU,0,
4167,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 0;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",CR,0,
4169,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c++ ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,1,
4170,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m-- < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
4171,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower >= upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
4172,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= --maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
4173,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower >= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
4174,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint-- && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
4175,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (!(bound < data[upper])) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",SEOI,0,
4176,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
        if (b <= c) {
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",ROR,0,
4177,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (--lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
4178,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= -2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,0,
4181,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a++ == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
4183,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[--j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
4184,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && --error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
4187,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 >= 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
4189,"public static void main(int b, int c, int d, int e, int f)",AOIS,1,
4190,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
                return ISOSCELES;
            if (trian == 2 && a - c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
4191,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && ++a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
4192,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) == mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
4195,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i > count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROR,0,
4197,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || !(b + c < a)) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
4200,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1--;
                        mytemp1 = mytemp2;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
4203,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian-- == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
4204,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (!(a == c)) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
4205,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] == data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",ROR,0,
4207,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x++ * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
4212,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
4213,"    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive >= array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_CHAR_ARRAY;
        }

        char[] subarray = new char[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
4214,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower == upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",ROR,0,
4215,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i == data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",ROR,0,
4217,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i++; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
4220,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * --x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
4221,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (++trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
4222,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 1;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",CR,0,
4223,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( -currpos );
            count++;
        }
        return count;
    }",AOIU,0,
4225,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( ++currentPosition );
        return newPosition < maxPosition;
    }",AOIS,0,
4226,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex == array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
4227,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) * ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AORB,1,
4228,"	public void addNode(int id, int rate, int coverage, int xPosition,",SEOR,0,
4230,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a > 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
4231,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i-- < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AOIS,0,
4232,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound++ > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
4234,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length();) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",VDL,0,
4235,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff >= 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",ROR,0,
4236,"    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_DOUBLE_ARRAY;
        }

        double[] subarray = new double[newSize];
        ;
        return subarray;
    }",FCDL,0,
4238,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind <= array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
4242,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, ~currentPosition );
    }",LOI,0,
4243,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
        }
            trian = trian % 1;
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
4244,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i >= length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,1,
4245,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
            if (a + b < c || a + c < b || b + c < a) {
        if (trian >= 0) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
4246,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; i < delimiterCodePoints.length; i--) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return false;
    }",AORS,0,
4247,"    public  void sort( int[] data )
    {
        if (data.length != 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",ROR,0,
4249,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return newPosition == maxPosition;
    }",ROR,0,
4251,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (false) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",VDL,0,
4252,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c < a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
4253,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
            trian = trian + 2;
        if (a >= c) {
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
4254,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,1,
4255,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex <= 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
4257,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position *= Character.charCount( c );
            }
        }
        return position;
    }",SAR,0,
4259,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 * ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AORB,1,
4265,"    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length % 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
4268,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        ;
        return subarray;
    }",FCDL,0,
4269,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
                return ISOSCELES;
            if (trian <= 2 && a + c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
4270,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (~position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
4272,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (++currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
4273,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, first + last + 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
4274,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b <= c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
4275,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian >= 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
4276,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 <= 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
4278,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length * 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
4281,"	public void addNode(int id, int rate, int coverage, int xPosition,",AORB,0,
4282,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( ++c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
4283,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = m + x - 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
4284,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i != length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",ROR,1,
4286,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return newPosition < maxPosition++;
    }",AOIS,0,
4287,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position %= Character.charCount( c );
            }
        }
        return position;
    }",SAR,0,
4288,"    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i > 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
4290,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i-- < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
4293,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (++lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
4294,"    public  void sort( int[] data )
    {
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = data.length - 1; j > i; --j) {
                if (data[j] < data[j - 1]) {
                    int temp = data[j++];
                    data[j] = data[j - 1];
                    data[j - 1] = temp;
                }
            }
        }
    }",AOIS,0,
4295,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (true) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",ROD,0,
4297,"    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length / 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
4298,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e-- == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
4299,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) == 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
4300,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind - tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AORB,0,
4301,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || !(c <= 0)) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",SEOI,0,
4305,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 0 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",CR,0,
4308,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length / 8);

            // We know first N chars are safe
            if (i > 0) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AORB,1,
4309,"    private  int scanToken( int startPos )
    {
        int position = -startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIU,0,
4313,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) % 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
4314,"    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind <= array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
4315,"public class Profit {

double Profit(double i)
{
  double bonus1,bonus2,bonus4,bonus6,bonus10,bonus;
  bonus1=100000*0.1;
  bonus2=100000*0.1+100000*0.075;
  bonus4=100000*0.1+100000*0.075+200000*0.05;
  bonus6=100000*0.1+100000*0.075+200000*0.05+200000*0.03;
  bonus10=100000*0.1+100000*0.075+200000*0.05+200000*0.03+400000*0.015;
  if(i<=100000)
    bonus=i*0.1;
    else if(i<=200000)
      bonus=bonus1+(i-100000)*0.075;
        else if(i<=400000)
          bonus=bonus2+(i-200000)*0.05;
            else if(i<=600000)
              bonus=bonus4+(abs(i)-400000)*0.03;
                else if(i<=1000000)
                  bonus=bonus6+(i-600000)*0.015;
                    else
                      bonus=bonus10+(i-1000000)*0.01;
return(bonus);
}
	double abs(double a) {
		if (a < 0) return -a;
		return a;
	}
}
",ABSI,1,
4317,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
            trian = trian / 3;
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
4318,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e == 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
4320,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == ++We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
4321,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
        if (a <= c) {
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",ROR,0,
4324,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse - y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
4325,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( ++c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
4326,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || ++a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
4327,	public boolean removeNode(int nodeId),AODU,0,
4328,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first % 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
4329,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( -currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start, currentPosition );
    }",AOIU,0,
4330,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e != 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
4331,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( ~currentPosition );
        return str.substring( start, currentPosition );
    }",LOI,0,
4332,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) * Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AORB,0,
4337,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return ~INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
4340,"public static int min(int I, int J)
{
	int Min;
    Min = I;
    if(J<++I) {
 	   Min=J;}
    return Min;
}",AOIS,1,
4341,"    public  java.lang.String nextToken()
    {
        currentPosition = newPosition >= 0 && !delimsChanged ? newPosition : skipDelimiters( currentPosition );
        delimsChanged = false;
        newPosition = -1;
        if (currentPosition >= maxPosition) {
            throw new java.util.NoSuchElementException();
        }
        int start = currentPosition;
        currentPosition = scanToken( currentPosition );
        return str.substring( start++, currentPosition );
    }",AOIS,1,
4342,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && ~position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",LOI,0,
4344,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AORB,0,
4345,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (--c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
4350,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize == 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
4351,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first++];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
4354,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * --We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
4355,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < ~upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
4357,"    public static  int classify( int a, int b, int c )
    {
        int trian;
            return INVALID;
        if (a <= 0 || b <= 0 || c < 0) {
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
4360,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                    return ISOSCELES;
                if (trian == 3 && b + c != a) {
                }
            }
        }
        return INVALID;
    }",ROR,0,
4362,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a >= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
4363,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < ~upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",LOI,0,
4367,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b > 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
4369,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N++;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIS,0,
4370,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( ++c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",AOIS,0,
4371,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c++ );
                }
            }
        }
        return position;
    }",AOIS,1,
4374,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > -1) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",AOIU,1,
4375,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
            trian = trian - 3;
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
4376,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength % offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
4380,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (--first + last) / 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AOIS,0,
4383,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == ~position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",LOI,0,
4385,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e > 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",ROR,1,
4387,"    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = -x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }",AOIU,0,
4392,"    public static void main(int number) {
        int[] a = new int[] { -14, 6, 28, 0 };
        int mytemp1, mytemp2, end, i, j;
        System.out.println(""original array is:\n"");
        for (i = 0; i < 3; i++) {
            System.out.printf(""%5d"", a[i]);
        }
        System.out.printf(""\n"");
        System.out.printf(""insert a new number:"");
        end = a[2];
        if (number >= end) {
            a[3] = number;
        } else {
            for (i = 0; i < 3; i++) {
                if (a[i] > number) {
                    mytemp1 = a[i];
                    a[i] = number;
                    for (j = i + 1; j < 4; j++) {
                        mytemp2 = a[j];
                        a[j] = mytemp1;
                        mytemp1 = mytemp2++;
                    }
                    break;
                }
            }
        }
        for (i = 0; i < 4; i++) {
            System.out.printf(""%6d"", a[i]);
        }
        System.out.printf(""\n"");
    }",AOIS,1,
4394,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > --maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
4395,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return 0;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",VDL,0,
4396,"    private String decodeName(String name) {
        final WeakReference ref = (WeakReference)unescapeCache.get(name);
        String s = (String)(ref == null ? null : ref.get());

        if (s == null) {
            final char dollarReplacementFirstChar = dollarReplacement.charAt(0);
            final char escapeReplacementFirstChar = escapeCharReplacement.charAt(0);
            final int length = name.length();

            // First, fast (common) case: nothing to decode
            int i = 0;

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                // We'll do a quick check for potential match
                if (c == dollarReplacementFirstChar || c == escapeReplacementFirstChar) {
                    // and if it might be a match, just quit, will check later on
                    break;
                }
            }

            if (i == length) {
                return name;
            }

            // Otherwise full processing
            final StringBuffer result = new StringBuffer(length + 8);

            // We know first N chars are safe
            if (i > 1) {
                result.append(name.substring(0, i));
            }

            for (; i < length; i++ ) {
                char c = name.charAt(i);
                if (c == dollarReplacementFirstChar && name.startsWith(dollarReplacement, i)) {
                    i += dollarReplacement.length() - 1;
                    result.append('$');
                } else if (c == escapeReplacementFirstChar
                    && name.startsWith(escapeCharReplacement, i)) {
                    i += escapeCharReplacement.length() - 1;
                    result.append('_');
                } else {
                    result.append(c);
                }
            }

            s = result.toString();
            unescapeCache.put(name, new WeakReference(s));
        }
        return s;
    }",CR,0,
4398,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == --c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
4400,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t ^ 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",LOR,0,
4404,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[i];
        data[i] = data[j];
        data[j] = -tmp;
    }",AOIU,0,
4407,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition++) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",AOIS,0,
4408,"    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - -1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",AOIU,0,
4409,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( --confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
4410,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) <= 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > 0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",ROR,1,
4411,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
            return ISOSCELES;
        if (trian == 1 && a * b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AORB,0,
4412,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && c <= ~Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
4413,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length * 1, max );
        quicksort( data, 0, data.length - 2 );
    }",AORB,0,
4414,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
        if (trian == 1 && a - b > c) {
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
4416,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position = Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",VDL,0,
4417,"    public  void sort( int[] data )
    {
        if (data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; !(i < data.length); i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",SEOI,0,
4419,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
            if (trian == 2 && a - c > b) {
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }

}",AORB,0,
4420,"    private  void quicksort( int[] data, int first, int last )
    {
        int lower = first + 1;
        int upper = last;
        swap( data, first, (first + last) % 2 );
        int bound = data[first];
        while (lower <= upper) {
            while (bound > data[lower]) {
                lower++;
            }
            while (bound < data[upper]) {
                upper--;
            }
            if (lower < upper) {
                swap( data, lower++, upper-- );
            } else {
                lower++;
            }
        }
        swap( data, upper, first );
        if (first < upper - 1) {
            quicksort( data, first, upper - 1 );
        }
        if (upper + 1 < last) {
            quicksort( data, upper + 1, last );
        }
    }",AORB,0,
4422,"    public  void swap( int[] data, int i, int j )
    {
        int tmp = data[~i];
        data[i] = data[j];
        data[j] = tmp;
    }",LOI,0,
4423,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (++currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,0,
4425,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt == offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",ROR,0,
4429,"    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive != array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        Class type = array.getClass().getComponentType();
        if (newSize <= 0) {
            return (Object[]) Array.newInstance(type, 0);
        }
        Object[] subarray = (Object[]) Array.newInstance(type, newSize);
        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
        return subarray;
    }",ROR,0,
4431,"public static int min(int I, int J)
{
	int Min;
    Min = I;
    if(J<I) {
 	   Min=J;}
    return Min++;
}",AOIS,1,
4433,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ++ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
4435,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse - z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
4436,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && position != maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",ROR,0,
4437,"    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex == array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",ROR,0,
4441,"    public static java.lang.String wrap( java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords )
    {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        int inputLineLength = str.length();
        int offset = 0;
        java.lang.StringBuffer wrappedLine = new java.lang.StringBuffer( inputLineLength + 32 );
        while (inputLineLength - offset > wrapLength) {
            if (str.charAt(offset) == ' ') {
                offset++;
                continue;
            }
            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);
            if (spaceToWrapAt >= offset) {
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;
            } else {
                if (wrapLongWords) {
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    spaceToWrapAt = str.indexOf(' ', wrapLength - offset);
                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }
        wrappedLine.append(str.substring(offset));
        return wrappedLine.toString();
    }",AORB,0,
4443,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length * 1.5));
        for (int i = 0; i <= array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",ROR,0,
4444,"public void main()
{
	 int We1_BA_DEF_ev = 0;
	 int We1_BA_DEF ;
	We1_BA_DEF_ev_ctr1 ++ ;
	We1_BA_DEF_ev_ctr0 ++ ;
	if ( 0 != AU8.We2_Clip15_OUT )
	{
		if (0 != Clip_15 )
		{
			AU8.We2_Clip15_OUT = 0;
			AU8.We3_Clip15_ON = 1;
			AU8.We9_DEF_OUT = 1;
			We1_BA_DEF_ev_ctr0 = 0;
			AU8.We11_BLINK_OUT = 1;
			control_led = 0;
        }
    }
	else
	{
		We1_BA_DEF = We1_BA_DEF_ev_ctr2 * ++We1_BA_DEF_ev_ctr2 - ( We1_BA_DEF_ev_ctr3 - 1000);
		if ( ! ( We1_BA_DEF == We1_BA_DEF_ev ))
		{
			We1_BA_DEF_ev_ctr2 = 0;
        }
		if ( 0 != AU8.We3_Clip15_ON )
		{
			if ( Clip_15 == 0)
			{
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					AU8.We11_BLINK_OUT = 0;
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						AU8.We12_BLINK_ON = 0;
                    }
                }
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					Exception_handler ();
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						AU8.We8_BE_CONFIRM_OUT = 0;
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							AU8.We9_DEF_OUT = 0;
                        }
                    }
                }
				AU8.We3_Clip15_ON = 0;
				request = 0;
				control_led = 0;
				AU8.We2_Clip15_OUT = 1;
            }
			else
			{
				if ( 0 != AU8.We5_BE_HANDLING )
				{
					if (( We1_BA_DEF_ev_ctr1 >= ((  int ) 1000 )) && ( confirmation_e == 0 ) && ( ControlElement_DEF == 0 ))
					{
						Exception_handler ();
						request = 0;
						AU8.We9_DEF_OUT = 1;
                    }
					else
					{
						if ( 0 != AU8.We6_BE_CONFIRM_ON )
						{
							if ( ControlElement_DEF == 0)
							{
								AU8.We6_BE_CONFIRM_ON = 0;
								AU8.We7_BE_LOSGELASSEN = 1;
                            }
                        }
						else
						{
							if ( 0 != AU8.We7_BE_LOSGELASSEN )
							{
								if ( ControlElement_DEF > 0)
								{
									Exception_handler ();
									request = 0;
									AU8.We8_BE_CONFIRM_OUT = 1;
                                }
                            }
                        }
                    }
                }
				else
				{
					if ( 0 != AU8.We8_BE_CONFIRM_OUT )
					{
						if ( ControlElement_DEF == 0)
						{
							AU8.We8_BE_CONFIRM_OUT = 0;
							AU8.We9_DEF_OUT = 1;
                        }
                    }
					else
					{
						if ( 0 != AU8.We9_DEF_OUT )
						{
							if ( ControlElement_DEF > 0)
							{
								AU8.We9_DEF_OUT = 0;
								request = 1;
								We1_BA_DEF_ev_ctr1 = 0;
								AU8.We5_BE_HANDLING = 1;
								AU8.We6_BE_CONFIRM_ON = 1;
                            }
                        }
                    }
                }
				if ( 0 != AU8.We11_BLINK_OUT )
				{
					if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
					{
						AU8.We11_BLINK_OUT = 0;
                    }
					else
					{
						if ( request > 0 && ( error_e == 0))
						{
							AU8.We11_BLINK_OUT = 0;
						}
                    }
                }
				else
				{
					if ( 0 != AU8.We12_BLINK_ON )
					{
						if (( request == 0) && ( error_e == 0))
						{
							AU8.We12_BLINK_ON = 0;
                        }
						else
						{
							if (( We1_BA_DEF_ev_ctr0 >= ((  int ) 3250 )) && error_e > 0 && confirmation_e > 0)
							{
								AU8.We12_BLINK_ON = 0;
                            }
                        }
                    }
                }
            }
        }
		else
		{
			AU8.We2_Clip15_OUT = 1;
        }
    }
	if ( We1_BA_DEF_ev_ctr2 + We1_BA_DEF_ev_ctr3 + We1_BA_DEF_ev_ctr5 == 1024)
	{
		We1_BA_DEF_ev_ctr2 = 32767;
    }
	else
	{
		if (( We1_BA_DEF_ev_ctr2 ) - ( We1_BA_DEF_ev_ctr3 ) - ( We1_BA_DEF_ev_ctr5 ) == 1024)
		{
			We1_BA_DEF_ev_ctr2 = - 32768;
        }
		else
			We1_BA_DEF_ev_ctr2 = 32767;
    }
}",AOIS,1,
4447,"    private  void setMaxDelimCodePoint()
    {
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }
        int m = 0;
        int c;
        int count = 0;
        for (int i = 0; i < delimiters.length(); i += Character.charCount( c )) {
            c = delimiters.charAt( i );
            if (c >= Character.MIN_HIGH_SURROGATE && ~c <= Character.MAX_LOW_SURROGATE) {
                c = delimiters.codePointAt( i );
                hasSurrogates = true;
            }
            if (m < c) {
                m = c;
            }
            count++;
        }
        maxDelimCodePoint = m;
        if (hasSurrogates) {
            delimiterCodePoints = new int[count];
            for (int i = 0, j = 0; i < count; i++, j += Character.charCount( c )) {
                c = delimiters.codePointAt( j );
                delimiterCodePoints[i] = c;
            }
        }
    }",LOI,0,
4450,"    public  boolean hasMoreTokens()
    {
        newPosition = skipDelimiters( currentPosition );
        return newPosition++ < maxPosition;
    }",AOIS,0,
4456,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b--) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",AOIS,0,
4457,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = ~trian + 3;
        }
        if (trian == 0) {
            if (a + b < c || a + c < b || b + c < a) {
                return INVALID;
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",LOI,0,
4460,"  public Vector3D orthogonal() {

    double threshold = 0.6 - getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
4462,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y * y / (z * z));
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
4464,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return -count;
    }",AOIU,0,
4465,"  public Vector3D orthogonal() {

    double threshold = 0.6 * getNorm();
    if (threshold == 0) {
      throw new ArithmeticException(""null norm"");
    }

    if ((x >= -threshold) && (x <= threshold)) {
      double inverse  = 1 / Math.sqrt(y + y + z * z);
      return new Vector3D(0, inverse * z, -inverse * y);
    } else if ((y >= -threshold) && (y <= threshold)) {
      double inverse  = 1 / Math.sqrt(x * x + z * z);
      return new Vector3D(-inverse * z, 0, inverse * x);
    }
    double inverse  = 1 / Math.sqrt(x * x + y * y);
    return new Vector3D(inverse * y, -inverse * x, 0);

  }",AORB,0,
4466,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (!(c <= maxDelimCodePoint && isDelimiter( c ))) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",SEOI,0,
4467,"    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return null;
        }
        if (startIndexInclusive < 0) {
            startIndexInclusive = 0;
        }
        if (endIndexExclusive > array.length) {
            endIndexExclusive = array.length;
        }
        int newSize = endIndexExclusive - startIndexInclusive;
        if (newSize <= 0) {
            return EMPTY_SHORT_ARRAY;
        }

        short[] subarray = new short[newSize];
        System.arraycopy(array, startIndexInclusive, subarray, -1, newSize);
        return subarray;
    }",AOIU,0,
4469,"    private  boolean isDelimiter( int codePoint )
    {
        for (int i = 0; --i < delimiterCodePoints.length; i++) {
            if (delimiterCodePoints[i] == codePoint) {
                return true;
            }
        }
        return false;
    }",AOIS,0,
4470,"    private  int scanToken( int startPos )
    {
        int position = startPos;
        while (position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c <= maxDelimCodePoint && isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        if (retDelims && startPos == position) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c <= maxDelimCodePoint && delimiters.indexOf( c ) >= 0) {
                    position++;
                }
            } else {
                int c = str.codePointAt( position );
                if (c >= maxDelimCodePoint && isDelimiter( c )) {
                    position += Character.charCount( c );
                }
            }
        }
        return position;
    }",ROR,0,
4474,"    public static  int classify( int a, int b, int c )
    {
        int trian;
        if (a <= 0 || b <= 0 || c <= 0) {
            return INVALID;
        }
        trian = 0;
        if (a == b) {
            trian = trian + 1;
        }
        if (a == c) {
            trian = trian + 2;
        }
        if (b == c) {
            trian = trian + 3;
        }
        if (trian == 0) {
                return INVALID;
            if (a + b < c || a + c < b || b + c <= a) {
            } else {
                return SCALENE;
            }
        }
        if (trian > 3) {
            return EQUILATERAL;
        }
        if (trian == 1 && a + b > c) {
            return ISOSCELES;
        } else {
            if (trian == 2 && a + c > b) {
                return ISOSCELES;
            } else {
                if (trian == 3 && b + c > a) {
                    return ISOSCELES;
                }
            }
        }
        return INVALID;
    }",ROR,0,
4476,"    public  int countTokens()
    {
        int count = 0;
        int currpos = currentPosition;
        while (currpos < maxPosition) {
            currpos = skipDelimiters( currpos++ );
            if (currpos >= maxPosition) {
                break;
            }
            currpos = scanToken( currpos );
            count++;
        }
        return count;
    }",AOIS,1,
4477,"    public static Map toMap(Object[] array) {
        if (array == null) {
            return null;
        }
        final Map map = new HashMap((int) (array.length * -1.5));
        for (int i = 0; i < array.length; i++) {
            Object object = array[i];
            if (object instanceof Map.Entry) {
                Map.Entry entry = (Map.Entry) object;
                map.put(entry.getKey(), entry.getValue());
            } else if (object instanceof Object[]) {
                Object[] entry = (Object[]) object;
                if (entry.length < 2) {
                    throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', has a length less than 2"");
                }
                map.put(entry[0], entry[1]);
            } else {
                throw new IllegalArgumentException(""Array element "" + i + "", '""
                        + object
                        + ""', is neither of type Map.Entry nor an Array"");
            }
        }
        return map;
    }",AOIU,0,
4478,"    public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u > 0) {
            u = -u;
        } // make u negative
        if (v > 0) {
            v = -v;
        } // make v negative
        // B1. [Find power of 2]
        int k = 0;
        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                            // both even...
            u /= 2;
            v /= 2;
            k++; // cast out twos.
        }
        if (k == 31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        // one is odd.
        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t & 1) == 0) { // while t is even..
                t /= 2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t > -1) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u) / 2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t != 0);
        return -u * (1 << k); // gcd is u*2^k
    }",AOIU,1,
4479,"    public  void sort( int[] data )
    {
        if (~data.length < 2) {
            return;
        }
        int max = 0;
        for (int i = 1; i < data.length; i++) {
            if (data[max] < data[i]) {
                max = i;
            }
        }
        swap( data, data.length - 1, max );
        quicksort( data, 0, data.length - 2 );
    }",LOI,0,
4480,"    private  int skipDelimiters( int startPos )
    {
        if (delimiters == null) {
            throw new java.lang.NullPointerException();
        }
        int position = startPos;
        while (!retDelims && --position < maxPosition) {
            if (!hasSurrogates) {
                char c = str.charAt( position );
                if (c > maxDelimCodePoint || delimiters.indexOf( c ) < 0) {
                    break;
                }
                position++;
            } else {
                int c = str.codePointAt( position );
                if (c > maxDelimCodePoint || !isDelimiter( c )) {
                    break;
                }
                position += Character.charCount( c );
            }
        }
        return position;
    }",AOIS,0,
